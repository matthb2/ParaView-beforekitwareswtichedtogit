/*********************************************************************NVMH3****
Path:  NVSDK\Common\media\programs
File:  cg_sinewave.cg

Copyright NVIDIA Corporation 2002
TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED
*AS IS* AND NVIDIA AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO EVENT SHALL NVIDIA OR ITS SUPPLIERS
BE LIABLE FOR ANY SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES
WHATSOEVER (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS,
BUSINESS INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER PECUNIARY LOSS)
ARISING OUT OF THE USE OF OR INABILITY TO USE THIS SOFTWARE, EVEN IF NVIDIA HAS
BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.


Comments:

******************************************************************************/

struct appin
{   
    float4 Position     : POSITION;
    float3 Normal       : NORMAL;
    float4 Color        : COLOR;
};

struct vertout
{
    float4 HPosition    : POSITION;
    float4 Color0       : COLOR0;
    float2 Texture0     : TEXCOORD0;
};

vertout main(appin IN, 
             uniform float4x4 ModelViewProj,    // Modelview-projection matrix
             uniform float4x4 ModelView,        // Modelview matrix
             uniform float4x4 ModelViewIT,      // Inverse transpose modelview matrix
             uniform float SinTime,
             uniform float ShowNormals)
{
    vertout OUT;
    OUT.HPosition = mul(ModelViewProj, IN.Position);
    OUT.Color0 = IN.Color;
    
    float4 eye = normalize(mul(ModelView, IN.Position));
    
    // Compute reflection vector for look up into cube map
    //float4 texCoord = eye - 2 * dot(eye, float4(IN.Normal,1)) * float4(IN.Normal, 1);
    float3 outNormal = mul(ModelView, float4(IN.Normal,1)).xyz;
    float3 reflectedRay = reflect(eye.xyz, outNormal);
    reflectedRay += 1;
    //reflectedRay /= 2.0;
    // now reflectedRay is in [0,1].
    OUT.Texture0 = reflectedRay.xy;
    return OUT;
}
