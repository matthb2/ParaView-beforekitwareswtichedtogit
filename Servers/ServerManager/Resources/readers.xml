<ServerManagerConfiguration>

  <ProxyGroup name="internal_sources">
   <SourceProxy name="legacyreader" 
                class="vtkPDataSetReader"
                label="Legacy VTK Reader">
     <Documentation
       short_help="Read legacy VTK files."
       long_help="Read files stored in VTK's legacy file format.">
       The Legacy VTK reader loads files stored in VTK's legacy file format (before VTK 4.2, although still supported). The expected file extension is .vtk. The type of the dataset may be structured grid, uniform rectilinear grid (image/volume), non-uniform rectiinear grid, unstructured grid, or polygonal.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the Legacy VTK reader.
        </Documentation>
     </StringVectorProperty>
   <!-- End legacyreader -->
   </SourceProxy>

   <SourceProxy name="XMLPolyDataReaderCore" 
                class="vtkXMLPolyDataReader"
                label="XML PolyData Reader">
     <Documentation
       short_help="Read VTK XML polydata files."
       long_help="Read serial VTK XML polydata files.">
       The XML Polydata reader reads the VTK XML polydata file format. The standard extension is .vtp.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        command="SetFileName"
        animateable="0"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the VTK XML polygonal dataset reader.
        </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty 
        name="TimestepValues"
        repeatable="1"
        information_only="1">
        <TimeStepsInformationHelper/>
        <Documentation>
          Available timestep values.
        </Documentation>
     </DoubleVectorProperty>

     <StringVectorProperty 
        name="CellArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Cell"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="CellArrayStatus"
        command="SetCellArrayStatus"
        number_of_elements="0" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="CellArrayInfo"
        label="Cell Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="CellArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which cell-centered arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty 
        name="PointArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Point"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayStatus"
        command="SetPointArrayStatus"
        number_of_elements="0" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0" 
        information_property="PointArrayInfo"
        label="Point Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="PointArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which point-centered arrays to read.
       </Documentation>
     </StringVectorProperty>
   <!-- End XMLPolyDataReaderCore -->
   </SourceProxy>

   <SourceProxy name="XMLUnstructuredGridReaderCore" 
                class="vtkXMLUnstructuredGridReader"
                label="XML Unstructured Grid reader">
     <Documentation
       short_help="Read VTK XML unstructured grid data files."
       long_help="Read serial VTK XML unstructured grid data files.">
       The XML Unstructured Grid reader reads the VTK XML unstructured grid data file format. The standard extension is .vtu.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        command="SetFileName"
        animateable="0"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the VTK XML unstructured grid reader.
        </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty 
        name="TimestepValues"
        repeatable="1"
        information_only="1">
        <TimeStepsInformationHelper/>
        <Documentation>
          Available timestep values.
        </Documentation>
     </DoubleVectorProperty>

     <StringVectorProperty 
        name="CellArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Cell"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="CellArrayStatus"
        command="SetCellArrayStatus"
        number_of_elements="0" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0" 
        information_property="CellArrayInfo"
        label="Cell Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="CellArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which cell-centered arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty 
        name="PointArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Point"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayStatus"
        command="SetPointArrayStatus"
        number_of_elements="0" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0" 
        information_property="PointArrayInfo"
        label="Point Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="PointArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which point-centered arrays to read.
       </Documentation>
     </StringVectorProperty>
   <!-- End XMLUnstructuredGridReaderCore -->
   </SourceProxy>

   <SourceProxy name="XMLImageDataReaderCore" 
                class="vtkXMLImageDataReader"
                label="XML Image Data Reader">
     <Documentation
       short_help="Read VTK XML image data files."
       long_help="Read serial VTK XML image data files.">
       The XML Image Data reader reads the VTK XML image data file format. The standard extension is .vti.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the VTK XML uniform rectilinear (image/volume) data reader.
        </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty 
        name="TimestepValues"
        repeatable="1"
        information_only="1">
        <TimeStepsInformationHelper/>
        <Documentation>
          Available timestep values.
        </Documentation>
     </DoubleVectorProperty>

     <StringVectorProperty 
        name="CellArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Cell"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="CellArrayStatus"
        command="SetCellArrayStatus"
        number_of_elements="0" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0" 
        information_property="CellArrayInfo"
        label="Cell Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="CellArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which cell-centered arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty 
        name="PointArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Point"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayStatus"
        command="SetPointArrayStatus"
        number_of_elements="0" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="PointArrayInfo"
        label="Point Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="PointArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which point-centered arrays to read.
       </Documentation>
     </StringVectorProperty>

   <!-- End XMLImageDataReaderCore -->
   </SourceProxy>

   <SourceProxy name="XMLStructuredGridReaderCore" 
                class="vtkXMLStructuredGridReader"
                label="XML Structured Grid Reader">
     <Documentation
       short_help="Read VTK XML structured grid data files."
       long_help="Read serial VTK XML structured grid data files.">
       The XML Structured Grid reader reads the VTK XML structured grid data file format. The standard extension is .vts.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the VTK XML structured grid reader.
        </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty 
        name="TimestepValues"
        repeatable="1"
        information_only="1">
        <TimeStepsInformationHelper/>
        <Documentation>
          Available timestep values.
        </Documentation>
     </DoubleVectorProperty>

     <StringVectorProperty 
        name="CellArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Cell"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="CellArrayStatus"
        command="SetCellArrayStatus"
        number_of_elements="0" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0" 
        information_property="CellArrayInfo"
        label="Cell Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="CellArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which cell-centered arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty 
        name="PointArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Point"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayStatus"
        command="SetPointArrayStatus"
        number_of_elements="0" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="PointArrayInfo"
        label="Point Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="PointArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which point-centered arrays to read.
       </Documentation>
     </StringVectorProperty>
   <!-- End XMLStructuredGridReaderCore -->
   </SourceProxy>

   <SourceProxy name="XMLRectilinearGridReaderCore" 
                class="vtkXMLRectilinearGridReader"
                label="XML Rectilinear Grid Reader">
     <Documentation
       short_help="Read VTK XML rectilinear grid data files."
       long_help="Read serial VTK XML rectilinear grid data files.">
       The XML Rectilinear Grid reader reads the VTK XML rectilinear grid data file format. The standard extension is .vtr.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the VTK XML non-uniform rectilinear grid reader.
        </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty 
        name="TimestepValues"
        repeatable="1"
        information_only="1">
        <TimeStepsInformationHelper/>
        <Documentation>
          Available timestep values.
        </Documentation>
     </DoubleVectorProperty>

     <StringVectorProperty 
        name="CellArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Cell"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="CellArrayStatus"
        command="SetCellArrayStatus"
        number_of_elements="0" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0" 
        information_property="CellArrayInfo"
        label="Cell Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="CellArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which cell-centered arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty 
        name="PointArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Point"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayStatus"
        command="SetPointArrayStatus"
        number_of_elements="0" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="PointArrayInfo"
        label="Point Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="PointArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which point-centered arrays to read.
       </Documentation>
     </StringVectorProperty>
   <!-- End XMLRectilinearGridReaderCore -->
   </SourceProxy>

   <SourceProxy name="XMLPPolyDataReaderCore" 
                class="vtkXMLPPolyDataReader"
                label="XML Partitioned Polydata Reader">
     <Documentation
       short_help="Read partitioned VTK XML polydata files."
       long_help="Read the summary file and the associated VTK XML polydata files.">
       The XML Partitioned Polydata reader reads the partitioned VTK polydata file format. It reads the partitioned format's summary file and then the associated VTK XML polydata files. The expected file extension is .pvtp.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the partitioned VTK XML polygonal dataset reader.
        </Documentation>
     </StringVectorProperty>

     <StringVectorProperty 
        name="CellArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Cell"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="CellArrayStatus"
        command="SetCellArrayStatus"
        number_of_elements="0" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0" 
        information_property="CellArrayInfo"
        label="Cell Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="CellArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which cell-centered arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty 
        name="PointArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Point"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayStatus"
        command="SetPointArrayStatus"
        number_of_elements="0" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="PointArrayInfo"
        label="Point Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="PointArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which point-centered arrays to read.
       </Documentation>
     </StringVectorProperty>

   <!-- End XMLPPolyDataReaderCore -->
   </SourceProxy>

   <SourceProxy name="XMLPUnstructuredGridReaderCore" 
                class="vtkXMLPUnstructuredGridReader"
                label="XML Partitioned Unstructured Grid Reader">
     <Documentation
       short_help="Read partitioned VTK XML unstructured grid files."
       long_help="Read the summary file and the associated VTK XML unstructured grid files.">
       The XML Partitioned Unstructured Grid reader reads the partitioned VTK unstructured grid data file format. It reads the partitioned format's summary file and then the associated VTK XML unstructured grid data files. The expected file extension is .pvtu.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the partitioned VTK XML unstructured grid reader.
        </Documentation>
     </StringVectorProperty>

     <StringVectorProperty 
        name="CellArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Cell"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="CellArrayStatus"
        command="SetCellArrayStatus"
        number_of_elements="0" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0" 
        information_property="CellArrayInfo"
        label="Cell Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="CellArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which cell-centered arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty 
        name="PointArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Point"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayStatus"
        command="SetPointArrayStatus"
        number_of_elements="0" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0" 
        information_property="PointArrayInfo"
        label="Point Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="PointArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which point-centered arrays to read.
       </Documentation>
     </StringVectorProperty>
   <!-- End XMLPUnstructuredGridReaderCore -->
   </SourceProxy>

   <SourceProxy name="XMLPImageDataReaderCore" 
                class="vtkXMLPImageDataReader"
                label="XML Partitioned Image Data Reader">
     <Documentation
       short_help="Read partitioned VTK XML image data files."
       long_help="Read the summary file and the associated VTK XML image data files.">
       The XML Partitioned Image Data reader reads the partitioned VTK image data file format. It reads the partitioned format's summary file and then the associated VTK XML image data files. The expected file extension is .pvti.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the partitioned VTK XML uniform rectilinear grid (image/volume) reader.
        </Documentation>
     </StringVectorProperty>

     <StringVectorProperty 
        name="CellArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Cell"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="CellArrayStatus"
        command="SetCellArrayStatus"
        number_of_elements="0" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0" 
        information_property="CellArrayInfo"
        label="Cell Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="CellArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This propert lists which cell-centered arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty 
        name="PointArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Point"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayStatus"
        command="SetPointArrayStatus"
        number_of_elements="0" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0" 
        information_property="PointArrayInfo"
        label="Point Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="PointArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which point-centered arrays to read.
       </Documentation>
     </StringVectorProperty>
   <!-- End XMLPImageDataReaderCore -->
   </SourceProxy>

   <SourceProxy name="XMLPStructuredGridReaderCore" 
                class="vtkXMLPStructuredGridReader"
                label="XML Partitioned Structured Grid Reader">
     <Documentation
       short_help="Read partitioned VTK XML structured grid files."
       long_help="Read the summary file and the associated VTK XML structured grid files.">
       The XML Partitioned Structured Grid reader reads the partitioned VTK structured grid data file format. It reads the partitioned format's summary file and then the associated VTK XML structured grid data files. The expected file extension is .pvts.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the partitioned VTK XML structured grid reader.
        </Documentation>
     </StringVectorProperty>

     <StringVectorProperty 
        name="CellArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Cell"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="CellArrayStatus"
        command="SetCellArrayStatus"
        number_of_elements="0" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0" 
        information_property="CellArrayInfo"
        label="Cell Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="CellArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which cell-centered arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty 
        name="PointArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Point"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayStatus"
        command="SetPointArrayStatus"
        number_of_elements="0" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0" 
        information_property="PointArrayInfo"
        label="Point Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="PointArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which point-centered arrays to read.
       </Documentation>
     </StringVectorProperty>
   <!-- End XMLPStructuredGridReaderCore -->
   </SourceProxy>

   <SourceProxy name="XMLPRectilinearGridReaderCore" 
                class="vtkXMLPRectilinearGridReader"
                label="XML Partitioned Rectilinear Grid Reader">
     <Documentation
       short_help="Read partitioned VTK XML rectilinear grid files."
       long_help="Read the summary file and the associated VTK XML rectilinear grid files.">
       The XML Partitioned Rectilinear Grid reader reads the partitioned VTK rectilinear grid file format. It reads the partitioned format's summary file and then the associated VTK XML rectilinear grid files. The expected file extension is .pvtr.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the partitioned VTK XML non-uniform rectilinear grid reader.
        </Documentation>
     </StringVectorProperty>

     <StringVectorProperty 
        name="CellArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Cell"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="CellArrayStatus"
        command="SetCellArrayStatus"
        number_of_elements="0" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0" 
        information_property="CellArrayInfo"
        label="Cell Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="CellArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which cell-centered arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty 
        name="PointArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Point"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayStatus"
        command="SetPointArrayStatus"
        number_of_elements="0" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0" 
        information_property="PointArrayInfo"
        label="Point Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="PointArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which point-centered arrays to read.
       </Documentation>
     </StringVectorProperty>
   <!-- End XMLPRectilinearGridReaderCore -->
   </SourceProxy>

   <SourceProxy name="stlreadercore" class="vtkSTLReader" label="STL Reader">
     <Documentation
       short_help="Read STL files."
       long_help="Read ASCII or binary stereo lithography (STL) files.">
       The STL reader reads ASCII or binary stereo lithography (STL) files. The expected file extension is .stl. The output of this reader is a polygonal dataset.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the STL reader.
        </Documentation>
     </StringVectorProperty>
   <!-- End stlreader -->
   </SourceProxy>

   <SourceProxy name="CSVReaderCore" class="vtkDelimitedTextReader" label="CSV Reader">
      <Documentation
        short_help="Read a comma-separated values file."
        long_help="Read a comma-separated values file into a 1D rectilinear grid.">
        The CSV reader reads a comma-separated values file into a 1D rectilinear
        grid. If the file was saved using the CSVWriter, then the rectilinear
        grid's points and point data can be restored as well as the cell data.
        Otherwise all the data in the CSV file is treated as cell data. The
        default file extension is .csv.
      </Documentation>
      <StringVectorProperty name="FileName"
        command="SetFileName"
        animateable="0" >
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the CSV (Command Separated Values) reader.
        </Documentation>
      </StringVectorProperty>

      <IntVectorProperty name="DetectNumericColumns"
        command="SetDetectNumericColumns"
        number_of_elements="1"
        default_values="1">
        <BooleanDomain name="bool" />
        <Documentation>
          When set to true, the reader will detect numeric columns and create
          vtkDoubleArray or vtkIntArray for those instead of vtkStringArray.
        </Documentation>
      </IntVectorProperty>

      <IntVectorProperty name="UseStringDelimiter"
        command="SetUseStringDelimiter"
        number_of_elements="1"
        default_values="1">
        <BooleanDomain name="bool" />
        <Documentation>
          This property indicates whether to use the string delimiter.
        </Documentation>
      </IntVectorProperty>

      <IntVectorProperty name="HaveHeaders"
        command="SetHaveHeaders"
        number_of_elements="1"
        default_values="1">
        <BooleanDomain name="bool" />
        <Documentation>
          If the value of this property is 1, treat the first line of the file as headers.
        </Documentation>
      </IntVectorProperty>

      <StringVectorProperty name="FieldDelimiterCharacters"
        command="SetFieldDelimiterCharacters"
        number_of_elements="1"
        default_values=",">
        <Documentation>
          This property lists the characters that may be used to separate fields.  For
          example, a value of "," indicates a comma-separated value file.  A
          value of ".:;" indicates that columns may be separated by a
          period, colon or semicolon.  The order of the characters in the text
          string does not matter.
        </Documentation>
      </StringVectorProperty>

      <!-- End of CSVReaderCore -->
   </SourceProxy>


  </ProxyGroup>

  <ProxyGroup name="sources">
   <SourceProxy name="CosmoReader" 
                class="vtkCosmoReader"
                label="COSMO Reader">
     <Documentation
       short_help="Read a cosmology file."
       long_help="Read a cosmology file into a vtkUnstructuredGrid.">
       The Cosmology reader reads a binary file of particle location, 
       velocity and mass creating a vtkUnstructuredGrid. The default 
       file extension is .cosmo.
     </Documentation>

     <StringVectorProperty
        name="FileName"
        command="SetFileName"
        animateable="0"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the COSMO reader.
        </Documentation>
     </StringVectorProperty>

     <IntVectorProperty
        name="Stride"
        command="SetStride"
        number_of_elements="1"
        default_values="1" >
        <IntRangeDomain name="range" min="1" />
     </IntVectorProperty>

     <IntVectorProperty
        name="DefaultRangeInfo"
        command="GetPositionRange"
        information_only="1">
        <SimpleIntInformationHelper/>
     </IntVectorProperty>

     <IntVectorProperty
        name="PositionRange"
        command="SetPositionRange"
        number_of_elements="2"
        default_values="0 0">
        <IntRangeDomain name="range">
             <RequiredProperties>
                 <Property name="DefaultRangeInfo" function="Range"/>
             </RequiredProperties>
        </IntRangeDomain>
     </IntVectorProperty>

     <StringVectorProperty
        name="PointArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Point"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayStatus"
        command="SetPointArrayStatus"
        number_of_elements="2"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="PointArrayInfo" >
        <ArraySelectionDomain name="array_list" >
          <RequiredProperties>
             <Property name="PointArrayInfo" function="ArrayList"/>
          </RequiredProperties>
        </ArraySelectionDomain>
     </StringVectorProperty>

     <IntVectorProperty 
        name="MakeCells" 
        command="SetMakeCells" 
        number_of_elements="1"
        default_values="0" > 
       <BooleanDomain name="bool"/>
       <Documentation>
         If this property is set to 1, a VTK_VERTEX cell is created for each point.
       </Documentation>
     </IntVectorProperty>

   <!-- End CosmoReader -->
   </SourceProxy>

   <SourceProxy name="DEMReader" 
                class="vtkDEMReader"
                label="DEM Reader">
     <Documentation
       short_help="Read a dataset in DEM format"
       long_help="Read a DEM (Digital Elevation Model) file.">
       The DEM reader reads Digital Elevation Model files containing elevation values derived from the U. S. Geologic Survey. The default file extension is .dem. This reader produces uniform rectilinear (image/volume) data output.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        command="SetFileName"
        animateable="0"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the DEM (Digital Elevation Map) reader.
        </Documentation>
     </StringVectorProperty>

   <!-- End DEMReader -->
   </SourceProxy>

   <SourceProxy name="XMLMultiBlockDataReader" 
                class="vtkXMLMultiBlockDataReader"
                label="XML Multi-Block Data Reader">
     <Documentation
       short_help="Read VTK XML multi-block datasets."
       long_help="Read a VTK XML multi-block data file and the serial VTK XML data files to which it points.">
       The XML Multi-Block Data reader reads the VTK XML multi-block data file format. XML multi-block data files are meta-files that point to a list of serial VTK XML files. When reading in parallel, this reader will distribute sub-blocks among processors. The expected file extensions are .vtm and .vtmb.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        command="SetFileName"
        animateable="0"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the VTK multi-block reader.
        </Documentation>
     </StringVectorProperty>
   <!-- End MultiBlockDataReader -->
   </SourceProxy>

   <SourceProxy name="XMLHierarchicalBoxDataReader" 
                class="vtkXMLHierarchicalBoxDataReader"
                label="XML Hierarchical Box Data Reader">
     <Documentation
       short_help="Read a VTK data file containing a hierarchical box dataset."
       long_help="Read a VTK XML-based data file containing a hierarchical dataset containing vtkUniformGrids.">
       The XML Hierarchical Box Data reader reads VTK's XML-based file format
       containing a vtkHierarchicalBoxDataSet. The expected file extensions are .vtm and .vthd.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        command="SetFileName"
        animateable="0"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the VTK hierarchical box data reader.
        </Documentation>
     </StringVectorProperty>
   <!-- End HierarchicalBoxDataReader -->
   </SourceProxy>

   <SourceProxy name="PVDReader" 
                class="vtkPVDReader"
                label="PVD Reader">
     <Documentation
       short_help="Read a PVD file."
       long_help="Load a dataset stored in ParaView's PVD file format.">
       The PVD reader reads data stored in ParaView's PVD file format. The .pvd file is essentially a header file that collects together other data files stored in VTK's XML-based file format.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        command="SetFileName"
        animateable="0"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the PVD reader.
        </Documentation>
     </StringVectorProperty>
     <DoubleVectorProperty 
        name="TimestepValues"
        repeatable="1"
        information_only="1">
        <TimeStepsInformationHelper/>
        <Documentation>
          Available timestep values.
        </Documentation>
     </DoubleVectorProperty>
   <!-- End PVDReader -->
   </SourceProxy>

   <FileSeriesReaderProxy name="XMLPolyDataReader"
                          class="vtkFileSeriesReader"
                          label="XML PolyData Reader"
                          file_name_method="SetFileName">
     <Documentation short_help="Read VTK XML polydata files."
                    long_help="Read serial VTK XML polydata files.">
       The XML Polydata reader reads the VTK XML polydata file format. The standard extension is .vtp.  This reader also supports file series.
     </Documentation>

     <SubProxy>
       <Proxy name="Reader"
              proxygroup="internal_sources" proxyname="XMLPolyDataReaderCore">
       </Proxy>
       <ExposedProperties>
         <Property name="CellArrayInfo" />
         <Property name="CellArrayStatus" />
         <Property name="PointArrayInfo" />
         <Property name="PointArrayStatus" />
       </ExposedProperties>
     </SubProxy>

     <StringVectorProperty name="FileNameInfo"
        command="GetCurrentFileName"
        information_only="1" >
        <SimpleStringInformationHelper />
     </StringVectorProperty>

     <StringVectorProperty name="FileName"
                           clean_command="RemoveAllFileNames"
                           command="AddFileName"
                           animateable="0"
                           number_of_elements="0"
                           information_property="FileNameInfo"
                           repeat_command="1">
       <FileListDomain name="files"/>
       <Documentation>
         The list of files to be read by the reader. Each file is expected to be in the VTK XML polygonal dataset format. The standard extension is .vtp. If more than 1 file is specified, the reader will switch to file series mode in which it will pretend that it can support time and provide 1 file per time step.
       </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty name="TimestepValues"
                           repeatable="1"
                           information_only="1">
       <TimeStepsInformationHelper/>
       <Documentation>
         Available timestep values.
       </Documentation>
     </DoubleVectorProperty>

   </FileSeriesReaderProxy> <!-- XMLPolyDataReader -->

   <FileSeriesReaderProxy name="XMLUnstructuredGridReader"
                          class="vtkFileSeriesReader"
                          label="XML Unstructured Grid Reader"
                          file_name_method="SetFileName">
     <Documentation short_help="Read VTK XML unstructured grid data files."
                    long_help="Read serial VTK XML unstructured grid data files.">
       The XML Unstructured Grid reader reads the VTK XML unstructured grid data file format. The standard extension is .vtu. This reader also supports file series.
     </Documentation>

     <SubProxy>
       <Proxy name="Reader"
              proxygroup="internal_sources"
              proxyname="XMLUnstructuredGridReaderCore">
       </Proxy>
       <ExposedProperties>
         <Property name="CellArrayInfo" />
         <Property name="CellArrayStatus" />
         <Property name="PointArrayInfo" />
         <Property name="PointArrayStatus" />
       </ExposedProperties>
     </SubProxy>

     <StringVectorProperty name="FileNameInfo"
        command="GetCurrentFileName"
        information_only="1" >
        <SimpleStringInformationHelper />
     </StringVectorProperty>

     <StringVectorProperty name="FileName"
                           clean_command="RemoveAllFileNames"
                           command="AddFileName"
                           animateable="0"
                           number_of_elements="0" 
                           information_property="FileNameInfo"
                           repeat_command="1">
       <FileListDomain name="files"/>
       <Documentation>
         The list of files to be read by the reader. Each file is expected to be in the VTK XML unstructured grid data format. The standard extension is .vtu. If more than 1 file is specified, the reader will switch to file series mode in which it will pretend that it can support time and provide 1 file per time step.
       </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty name="TimestepValues"
                           repeatable="1"
                           information_only="1">
       <TimeStepsInformationHelper/>
       <Documentation>
         Available timestep values.
       </Documentation>
     </DoubleVectorProperty>

   </FileSeriesReaderProxy> <!-- XMLUnstructuredGridReader -->

   <FileSeriesReaderProxy name="XMLImageDataReader"
                          class="vtkFileSeriesReader"
                          label="XML Image Data Reader"
                          file_name_method="SetFileName">
     <Documentation short_help="Read VTK XML image data files."
                    long_help="Read serial VTK XML image data files.">
       The XML Image Data reader reads the VTK XML image data file format. The standard extension is .vti. This reader also supports file series.
     </Documentation>

     <SubProxy>
       <Proxy name="Reader"
              proxygroup="internal_sources"
              proxyname="XMLImageDataReaderCore">
       </Proxy>
       <ExposedProperties>
         <Property name="CellArrayInfo" />
         <Property name="CellArrayStatus" />
         <Property name="PointArrayInfo" />
         <Property name="PointArrayStatus" />
       </ExposedProperties>
     </SubProxy>

     <StringVectorProperty name="FileNameInfo"
        command="GetCurrentFileName"
        information_only="1" >
        <SimpleStringInformationHelper />
     </StringVectorProperty>

     <StringVectorProperty name="FileName"
                           clean_command="RemoveAllFileNames"
                           command="AddFileName"
                           animateable="0"
                           number_of_elements="0" 
                           repeat_command="1"
                           information_property="FileNameInfo" >
       <FileListDomain name="files"/>
       <Documentation>
         The list of files to be read by the reader. Each file is expected to be in the VTK XML image data format. The standard extension is .vti. If more than 1 file is specified, the reader will switch to file series mode in which it will pretend that it can support time and provide 1 file per time step.
       </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty name="TimestepValues"
                           repeatable="1"
                           information_only="1">
       <TimeStepsInformationHelper/>
       <Documentation>
         Available timestep values.
       </Documentation>
     </DoubleVectorProperty>

   </FileSeriesReaderProxy> <!-- XMLImageDataReader -->

   <FileSeriesReaderProxy name="XMLStructuredGridReader"
                          class="vtkFileSeriesReader"
                          label="XML Structured Grid Reader"
                          file_name_method="SetFileName">
     <Documentation short_help="Read VTK XML structured grid data files."
                    long_help="Read serial VTK XML structured grid data files.">
       The XML Structured Grid reader reads the VTK XML structured grid data file format. The standard extension is .vts. This reader also supports file series.
     </Documentation>

     <SubProxy>
       <Proxy name="Reader"
              proxygroup="internal_sources"
              proxyname="XMLStructuredGridReaderCore">
       </Proxy>
       <ExposedProperties>
         <Property name="CellArrayInfo" />
         <Property name="CellArrayStatus" />
         <Property name="PointArrayInfo" />
         <Property name="PointArrayStatus" />
       </ExposedProperties>
     </SubProxy>

     <StringVectorProperty name="FileNameInfo"
        command="GetCurrentFileName"
        information_only="1" >
        <SimpleStringInformationHelper />
     </StringVectorProperty>

     <StringVectorProperty name="FileName"
                           clean_command="RemoveAllFileNames"
                           command="AddFileName"
                           animateable="0"
                           number_of_elements="0" 
                           repeat_command="1"
                           information_property="FileNameInfo">
       <FileListDomain name="files"/>
       <Documentation>
         The list of files to be read by the reader. Each file is expected to be in the VTK XML structured grid data format. The standard extension is .vts. If more than 1 file is specified, the reader will switch to file series mode in which it will pretend that it can support time and provide 1 file per time step.
       </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty name="TimestepValues"
                           repeatable="1"
                           information_only="1">
       <TimeStepsInformationHelper/>
       <Documentation>
         Available timestep values.
       </Documentation>
     </DoubleVectorProperty>

   </FileSeriesReaderProxy> <!-- XMLStructuredGridReader -->

   <FileSeriesReaderProxy name="XMLRectilinearGridReader"
                          class="vtkFileSeriesReader"
                          label="XML Rectilinear Grid Reader"
                          file_name_method="SetFileName">
     <Documentation short_help="Read VTK XML rectilinear grid data files."
                    long_help="Read serial VTK XML rectilinear grid data files.">
       The XML Rectilinear Grid reader reads the VTK XML rectilinear grid data file format. The standard extension is .vtr. This reader also supports file series.
     </Documentation>

     <SubProxy>
       <Proxy name="Reader"
              proxygroup="internal_sources"
              proxyname="XMLRectilinearGridReaderCore">
       </Proxy>
       <ExposedProperties>
         <Property name="CellArrayInfo" />
         <Property name="CellArrayStatus" />
         <Property name="PointArrayInfo" />
         <Property name="PointArrayStatus" />
       </ExposedProperties>
     </SubProxy>

     <StringVectorProperty name="FileNameInfo"
        command="GetCurrentFileName"
        information_only="1" >
        <SimpleStringInformationHelper />
     </StringVectorProperty>

     <StringVectorProperty name="FileName"
                           clean_command="RemoveAllFileNames"
                           command="AddFileName"
                           animateable="0"
                           number_of_elements="0" 
                           repeat_command="1"
                           information_property="FileNameInfo">
       <FileListDomain name="files"/>
       <Documentation>
         The list of files to be read by the reader. Each file is expected to be in the VTK XML rectilinear grid data format. The standard extension is .vtr. If more than 1 file is specified, the reader will switch to file series mode in which it will pretend that it can support time and provide 1 file per time step.
       </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty name="TimestepValues"
                           repeatable="1"
                           information_only="1">
       <TimeStepsInformationHelper/>
       <Documentation>
         Available timestep values.
       </Documentation>
     </DoubleVectorProperty>

   </FileSeriesReaderProxy> <!-- XMLRectilinearGridReader -->

   <FileSeriesReaderProxy name="XMLPPolyDataReader"
                          class="vtkFileSeriesReader"
                          label="XML Partitioned Polydata Reader"
                          file_name_method="SetFileName">
     <Documentation short_help="Read partitioned VTK XML polydata files."
                    long_help="Read the summary file and the assicoated VTK XML polydata files.">
       The XML Partitioned Polydata reader reads the partitioned VTK polydata file format. It reads the partitioned format's summary file and then the associated VTK XML polydata files. The expected file extension is .pvtp.  This reader also supports file series.
     </Documentation>

     <SubProxy>
       <Proxy name="Reader"
              proxygroup="internal_sources" proxyname="XMLPPolyDataReaderCore">
       </Proxy>
       <ExposedProperties>
         <Property name="CellArrayInfo" />
         <Property name="CellArrayStatus" />
         <Property name="PointArrayInfo" />
         <Property name="PointArrayStatus" />
       </ExposedProperties>
     </SubProxy>

     <StringVectorProperty name="FileNameInfo"
        command="GetCurrentFileName"
        information_only="1" >
        <SimpleStringInformationHelper />
     </StringVectorProperty>

     <StringVectorProperty name="FileName"
                           clean_command="RemoveAllFileNames"
                           command="AddFileName"
                           animateable="0"
                           number_of_elements="0" 
                           repeat_command="1"
                           information_property="FileNameInfo">
       <FileListDomain name="files"/>
       <Documentation>
         The list of files to be read by the reader. Each file is expected to be in the partitioned VTK XML polygonal dataset format. The standard extension is .pvtp. If more than 1 file is specified, the reader will switch to file series mode in which it will pretend that it can support time and provide 1 file per time step.
       </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty name="TimestepValues"
                           repeatable="1"
                           information_only="1">
       <TimeStepsInformationHelper/>
       <Documentation>
         Available timestep values.
       </Documentation>
     </DoubleVectorProperty>

   </FileSeriesReaderProxy> <!-- XMLPPolyDataReader -->

   <FileSeriesReaderProxy name="XMLPUnstructuredGridReader"
                          class="vtkFileSeriesReader"
                          label="XML Partitioned Unstructured Grid Reader"
                          file_name_method="SetFileName">
     <Documentation short_help="Read partitioned VTK XML unstructured grid data files."
                    long_help="Read the summary file and the associated VTK XML unstructured grid data files.">
       The XML Partitioned Unstructured Grid reader reads the partitioned VTK unstructured grid data file format. It reads the partitioned format's summary file and then the associated VTK XML unstructured grid data files. The expected file extension is .pvtu. This reader also supports file series.
     </Documentation>

     <SubProxy>
       <Proxy name="Reader"
              proxygroup="internal_sources"
              proxyname="XMLPUnstructuredGridReaderCore">
       </Proxy>
       <ExposedProperties>
         <Property name="CellArrayInfo" />
         <Property name="CellArrayStatus" />
         <Property name="PointArrayInfo" />
         <Property name="PointArrayStatus" />
       </ExposedProperties>
     </SubProxy>

     <StringVectorProperty name="FileNameInfo"
        command="GetCurrentFileName"
        information_only="1" >
        <SimpleStringInformationHelper />
     </StringVectorProperty>

     <StringVectorProperty name="FileName"
                           clean_command="RemoveAllFileNames"
                           command="AddFileName"
                           animateable="0"
                           number_of_elements="0" 
                           repeat_command="1"
                           information_property="FileNameInfo">
       <FileListDomain name="files"/>
       <Documentation>
         The list of files to be read by the reader. Each file is expected to be in the partitioned VTK XML unstructured grid data format. The standard extension is .pvtu. If more than 1 file is specified, the reader will switch to file series mode in which it will pretend that it can support time and provide 1 file per time step.
       </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty name="TimestepValues"
                           repeatable="1"
                           information_only="1">
       <TimeStepsInformationHelper/>
       <Documentation>
         Available timestep values.
       </Documentation>
     </DoubleVectorProperty>

   </FileSeriesReaderProxy> <!-- XMLPUnstructuredGridReader -->

   <FileSeriesReaderProxy name="XMLPImageDataReader"
                          class="vtkFileSeriesReader"
                          label="XML Partitioned Image Data Reader"
                          file_name_method="SetFileName">
     <Documentation short_help="Read partitioned VTK XML image data files."
                    long_help="Read the summary file and the associated VTK XML image data files.">
       The XML Partitioned Image Data reader reads the partitioned VTK image data file format. It reads the partitioned format's summary file and then the associated VTK XML image data files. The expected file extension is .pvti. This reader also supports file series.
     </Documentation>

     <SubProxy>
       <Proxy name="Reader"
              proxygroup="internal_sources"
              proxyname="XMLPImageDataReaderCore">
       </Proxy>
       <ExposedProperties>
         <Property name="CellArrayInfo" />
         <Property name="CellArrayStatus" />
         <Property name="PointArrayInfo" />
         <Property name="PointArrayStatus" />
       </ExposedProperties>
     </SubProxy>

     <StringVectorProperty name="FileNameInfo"
        command="GetCurrentFileName"
        information_only="1" >
        <SimpleStringInformationHelper />
     </StringVectorProperty>

     <StringVectorProperty name="FileName"
                           clean_command="RemoveAllFileNames"
                           command="AddFileName"
                           animateable="0"
                           number_of_elements="0" 
                           repeat_command="1"
                           information_property="FileNameInfo">
       <FileListDomain name="files"/>
       <Documentation>
         The list of files to be read by the reader. Each file is expected to be in the partitioned VTK XML image data format. The standard extension is .pvti. If more than 1 file is specified, the reader will switch to file series mode in which it will pretend that it can support time and provide 1 file per time step.
       </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty name="TimestepValues"
                           repeatable="1"
                           information_only="1">
       <TimeStepsInformationHelper/>
       <Documentation>
         Available timestep values.
       </Documentation>
     </DoubleVectorProperty>

   </FileSeriesReaderProxy> <!-- XMLPImageDataReader -->

   <FileSeriesReaderProxy name="XMLPStructuredGridReader"
                          class="vtkFileSeriesReader"
                          label="XML Partitioned Structured Grid Reader"
                          file_name_method="SetFileName">
     <Documentation short_help="Read partitioned VTK XML structured grid data files."
                    long_help="Read the summary file and the associated VTK XML structured grid data files.">
       The XML Partitioned Structured Grid reader reads the partitioned VTK structured grid data file format. It reads the partitioned format's summary file and then the associated VTK XML structured grid data files. The expected file extension is .pvts. This reader also supports file series.
     </Documentation>

     <SubProxy>
       <Proxy name="Reader"
              proxygroup="internal_sources"
              proxyname="XMLPStructuredGridReaderCore">
       </Proxy>
       <ExposedProperties>
         <Property name="CellArrayInfo" />
         <Property name="CellArrayStatus" />
         <Property name="PointArrayInfo" />
         <Property name="PointArrayStatus" />
       </ExposedProperties>
     </SubProxy>

     <StringVectorProperty name="FileNameInfo"
        command="GetCurrentFileName"
        information_only="1" >
        <SimpleStringInformationHelper />
     </StringVectorProperty>

     <StringVectorProperty name="FileName"
                           clean_command="RemoveAllFileNames"
                           command="AddFileName"
                           animateable="0"
                           number_of_elements="0" 
                           repeat_command="1"
                           information_property="FileNameInfo">
       <FileListDomain name="files"/>
       <Documentation>
         The list of files to be read by the reader. Each file is expected to be in the partitioned VTK XML structured grid data format. The standard extension is .pvts. If more than 1 file is specified, the reader will switch to file series mode in which it will pretend that it can support time and provide 1 file per time step.
       </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty name="TimestepValues"
                           repeatable="1"
                           information_only="1">
       <TimeStepsInformationHelper/>
       <Documentation>
         Available timestep values.
       </Documentation>
     </DoubleVectorProperty>

   </FileSeriesReaderProxy> <!-- XMLPStructuredGridReader -->

   <FileSeriesReaderProxy name="XMLPRectilinearGridReader"
                          class="vtkFileSeriesReader"
                          label="XML Partitioned Rectilinear Grid Reader"
                          file_name_method="SetFileName">
     <Documentation short_help="Read partitioned VTK XML rectilinear grid data files."
                    long_help="Read the summary file and the associated VTK XML rectilinear grid data files.">
       The XML Partitioned Rectilinear Grid reader reads the partitioned VTK rectilinear grid file format. It reads the partitioned format's summary file and then the associated VTK XML rectilinear grid files. The expected file extension is .pvtr. This reader also supports file series.
     </Documentation>

     <SubProxy>
       <Proxy name="Reader"
              proxygroup="internal_sources"
              proxyname="XMLPRectilinearGridReaderCore">
       </Proxy>
       <ExposedProperties>
         <Property name="CellArrayInfo" />
         <Property name="CellArrayStatus" />
         <Property name="PointArrayInfo" />
         <Property name="PointArrayStatus" />
       </ExposedProperties>
     </SubProxy>

     <StringVectorProperty name="FileNameInfo"
        command="GetCurrentFileName"
        information_only="1" >
        <SimpleStringInformationHelper />
     </StringVectorProperty>

     <StringVectorProperty name="FileName"
                           clean_command="RemoveAllFileNames"
                           command="AddFileName"
                           animateable="0"
                           number_of_elements="0" 
                           repeat_command="1"
                           information_property="FileNameInfo">
       <FileListDomain name="files"/>
       <Documentation>
         The list of files to be read by the reader. Each file is expected to be in the partitioned VTK XML rectilinear grid data format. The standard extension is .pvtr. If more than 1 file is specified, the reader will switch to file series mode in which it will pretend that it can support time and provide 1 file per time step.
       </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty name="TimestepValues"
                           repeatable="1"
                           information_only="1">
       <TimeStepsInformationHelper/>
       <Documentation>
         Available timestep values.
       </Documentation>
     </DoubleVectorProperty>

   </FileSeriesReaderProxy> <!-- XMLPRectilinearGridReader -->

   <SourceProxy name="RTXMLPolyDataReader"
                class="vtkRTXMLPolyDataReader">
     <StringVectorProperty
        name="FileName"
        command="SetFileName"
        animateable="0"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          Set the file name for the real-time VTK polygonal dataset reader.
        </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="Location"
        command="SetLocation"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          Set the data directory containing real time data files.
        </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="NextFileName"
        command="GetNextFileName"
        number_of_elements="1"
        information_only="1">
        <SimpleStringInformationHelper/>
     </StringVectorProperty>

     <IntVectorProperty
        name="NewDataAvailable"
        command="NewDataAvailable"
        number_of_elements="1"
                    default_values="2" 
        information_only="1">
        <SimpleIntInformationHelper/>
     </IntVectorProperty>

     <Property
        name="UpdateToNextFile"
        command="UpdateToNextFile">
     </Property>

     <Property
        name="ResetReader"
        command="ResetReader">
     </Property>
     <!-- End of RTXMLPolyDataReader -->
   </SourceProxy>

   <FileSeriesReaderProxy name="LegacyVTKFileReader"
                          class="vtkFileSeriesReader"
                          label="Legacy VTK Reader"
                          file_name_method="SetFileName">
     <Documentation
       short_help="Read legacy VTK files."
       long_help="Read files stored in VTK's legacy file format.">
       The Legacy VTK reader loads files stored in VTK's legacy file format (before VTK 4.2, although still supported). The expected file extension is .vtk. The type of the dataset may be structured grid, uniform rectilinear grid (image/volume), non-uniform rectiinear grid, unstructured grid, or polygonal. This reader also supports file series.
     </Documentation>
      <SubProxy>
        <Proxy name="Reader"
          proxygroup="internal_sources" proxyname="legacyreader">
        </Proxy>
      </SubProxy>

     <StringVectorProperty name="FileNameInfo"
        command="GetCurrentFileName"
        information_only="1" >
        <SimpleStringInformationHelper />
     </StringVectorProperty>

     <StringVectorProperty
        name="FileNames"
        clean_command="RemoveAllFileNames"
        command="AddFileName"
        animateable="0"
        number_of_elements="0" 
        repeat_command="1"
        information_property="FileNameInfo" >
        <FileListDomain name="files"/>
       <Documentation>
         The list of files to be read by the reader. If more than 1 file is specified, the reader will switch to file series mode in which it will pretend that it can support time and provide 1 file per time step.
       </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty 
        name="TimestepValues"
        repeatable="1"
        information_only="1">
        <TimeStepsInformationHelper/>
        <Documentation>
          Available timestep values.
        </Documentation>
     </DoubleVectorProperty>
     <!-- End legacyreader_t -->
   </FileSeriesReaderProxy>

   <SourceProxy name="pvtkfile" 
                class="vtkPDataSetReader"
                label="Partitioned Legacy VTK Reader">
     <Documentation
       short_help="Read partitioned legacy VTK files."
       long_help="Read files stored in VTK partitioned legacy format.">
       The Partitioned Legacy VTK reader loads files stored in VTK's partitioned legac file format (before VTK 4.2, although still supported). The expected file extension is .pvtk. The type of the dataset may be structured grid, uniform rectilinear grid (image/volume), non-uniform rectilinear grid, unstructured grid, or polygonal.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
       <FileListDomain name="files"/>
       <Documentation>
         This property specifies the file name for the Partitioned Legacy VTK reader.
       </Documentation>
     </StringVectorProperty>
   <!-- End pvtkfile -->
   </SourceProxy>

   <SourceProxy name="ensight" 
                class="vtkGenericEnSightReader"
                label="EnSight Reader">
     <Documentation
       short_help="Read EnSight files."
       long_help="Read EnSight 6 and Gold files.">
       The EnSight reader reads files in the format produced by CEI's EnSight. EnSight 6 and Gold files (both ASCII and binary) are supported. The default extension is .case. The output of this reader is a multi-block dataset.
     </Documentation>
     <StringVectorProperty
        name="CaseFileName"
        command="SetCaseFileName"
        animateable="0"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the case file name for the EnSight reader.
        </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty 
        name="TimestepValues"
        repeatable="1"
        information_only="1">
        <TimeStepsInformationHelper/>
        <Documentation>
          Available timestep values.
        </Documentation>
     </DoubleVectorProperty>

     <StringVectorProperty 
        name="CellArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Cell"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="CellArrayStatus"
        command="SetCellArrayStatus"
        number_of_elements="0" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="CellArrayInfo"
        label="Cell Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="CellArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which cell-centered arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty 
        name="PointArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Point"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayStatus"
        command="SetPointArrayStatus"
        number_of_elements="0" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0" 
        information_property="PointArrayInfo"
        label="Point Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="PointArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which point-centered arrays to read.
       </Documentation>
     </StringVectorProperty>
   <!-- End ensight -->
   </SourceProxy>

   <SourceProxy name="spcthreader" class="vtkSpyPlotReader"
                label="Spy Plot Reader">
     <Documentation
       short_help="Read files in the Spy Plot format."
       long_help="Read files in the SPCTH Spy Plot file format.">
       The Spy Plot reader loads an ASCII meta-file called the "case" file (extension .spcth). The case file lists all the binary files containing the dataset. This reader produces hierarchical datasets.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        command="SetFileName"
        animateable="0"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the Spy Plot reader.
        </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty 
        name="TimestepValues"
        repeatable="1"
        information_only="1">
        <TimeStepsInformationHelper/>
        <Documentation>
          Available timestep values.
        </Documentation>
     </DoubleVectorProperty>

     <IntVectorProperty 
        name="DownConvertVolumeFraction" 
        command="SetDownConvertVolumeFraction" 
        number_of_elements="1"
        default_values="1" > 
       <BooleanDomain name="bool"/>
       <Documentation>
         If this property is set to 0, the type of the volume fraction is float; is set to 1, the type is unsigned char.
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty 
        name="DistributeFiles" 
        command="SetDistributeFiles" 
        number_of_elements="1"
        default_values="1" > 
       <BooleanDomain name="bool"/>
       <Documentation>
         In parallel mode, if this property is set to 1, the reader will distribute files or blocks.
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty 
        name="GenerateLevelArray" 
        command="SetGenerateLevelArray" 
        number_of_elements="1"
        default_values="0" > 
       <BooleanDomain name="bool"/>
       <Documentation>
         If this property is set to 1, a cell array will be generated that stores the level of each block.
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty 
        name="GenerateActiveBlockArray" 
        command="SetGenerateActiveBlockArray" 
        number_of_elements="1"
        default_values="0" > 
       <BooleanDomain name="bool"/>
       <Documentation>
         If this property is set to 1, a cell array will be generated that stores the active status of a block.
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty 
        name="GenerateTracerArray" 
        command="SetGenerateTracerArray" 
        number_of_elements="1"
        default_values="0" > 
       <BooleanDomain name="bool"/>
       <Documentation>
         If this property is set to 1, a cell array will be generated that stores the coordinates of any tracers.
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty 
        name="GenerateBlockIdArray" 
        command="SetGenerateBlockIdArray" 
        number_of_elements="1"
        default_values="0" > 
       <BooleanDomain name="bool"/>
       <Documentation>
         If this property is set to 1, a cell array will be generated that stores a unique blockId for each block.
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty
        name="MergeXYZComponents"
        command="SetMergeXYZComponents"
        number_of_elements="1"
        default_values="1" >
       <BooleanDomain name="bool"/>
       <Documentation>
         If this property is set to 1, cell arrays named (for example) X velocity, Y velocity and Z velocity will be combined into a single vector array named velocity.
       </Documentation>
     </IntVectorProperty>

     <StringVectorProperty 
        name="CellArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Cell"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="CellArrayStatus"
        command="SetCellArrayStatus"
        number_of_elements="0" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="CellArrayInfo"
        label="Cell Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="CellArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which cell-centered arrays to read.
       </Documentation>
     </StringVectorProperty>
   <!-- End spcthreader-->
   </SourceProxy>

  <FileSeriesReaderProxy name="SPCTHRestartReader"
                         class="vtkFileSeriesReader"
                         label="Restarted Sim Spy Plot Reader"
                         file_name_method="SetFileName">
    <Documentation short_help="Read SPCTH files from simulation restarts."
                   long_help="Read collections of SPCTH files from simulations that were restarted.">
      When a CTH simulation is restarted, typically you get a new set of output files.  When you read them in your visualization, you often want to string these file sets together as if it was one continuous dump of files.  This reader allows you to specify a metadata file that will implicitly string the files together.
    </Documentation>
    <SubProxy>
      <Proxy name="Reader" proxygroup="sources" proxyname="spcthreader" />
      <ExposedProperties>
        <Property name="DownConvertVolumeFraction" />
        <Property name="DistributeFiles" />
        <Property name="GenerateLevelArray" />
        <Property name="GenerateActiveBlockArray" />
        <Property name="GenerateBlockIdArray" />
        <Property name="CellArrayInfo" />
        <Property name="CellArrayStatus" />
      </ExposedProperties>
    </SubProxy>

    <StringVectorProperty name="FileName"
                          animateable="0"
                          command="SetMetaFileName"
                          number_of_elements="1">
      <FileListDomain name="files" />
      <Documentation>
        This points to a special metadata file that lists the output files for each restart.
      </Documentation>
    </StringVectorProperty>

    <IntVectorProperty name="UseMetaFile"
                       command="SetUseMetaFile"
                       number_of_elements="1"
                       default_values="1">
      <BooleanDomain name="bool" />
      <Documentation>
        This hidden property must always be set to 1 for this proxy to work.
      </Documentation>
    </IntVectorProperty>

    <DoubleVectorProperty name="TimestepValues" 
                          repeatable="1"
                          information_only="1">
      <TimeStepsInformationHelper/>
    </DoubleVectorProperty>

    <Hints>
      <!-- This property is here simply to set it. -->
      <Property name="UseMetaFile" show="0" />
    </Hints>
    <!-- SPCTHRestartReader -->
  </FileSeriesReaderProxy>


   <SourceProxy name="vrmlreader" class="vtkVRMLSource" label="VRML Reader">
     <Documentation
       short_help="Read VRML 2.0 files."
       long_help="Load the geometry from a VRML 2.0 file.">
       The VRML reader loads only the geometry from a VRML (Virtual Reality Modeling Language) 2.0 file. The expected file extension is .wrl. The output of this reader is a polygonal dataset.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the VRML reader.
        </Documentation>
     </StringVectorProperty>
   <!-- End vrmlreader -->
   </SourceProxy>

   <SourceProxy name="plyreader" class="vtkPLYReader" label="PLY Reader">
     <Documentation
       short_help="Read PLY polygonal files."
       long_help="Read files stored in Stanford University's PLY polygonal file format.">
       The PLY reader reads files stored in the PLY polygonal file format developed at Stanford University. The PLY files that ParaView can read must have the elements "vertex" and "face" defined. The "vertex" elements must have the propertys "x", "y", and "z". The "face" elements must have the property "vertex_indices" defined. The default file extension for this reader is .ply.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the PLY reader.
        </Documentation>
     </StringVectorProperty>
   <!-- End plyreader -->
   </SourceProxy>

   <SourceProxy name="pdbreader" class="vtkPDBReader" label="PDB Reader">
     <Documentation
       short_help="Read PDB files."
       long_help="Read PDB molecule files.">
       The PDB reader reads files in the format used by the Protein Data Bank (an archive of experimentally determined three-dimensional structures of biological macromolecules). The expected file extension is .pdb. The output datasets are polygonal.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the PDB reader.
        </Documentation>
     </StringVectorProperty>
   <!-- End pdbreader -->
   </SourceProxy>

   <SourceProxy name="xyzreader" class="vtkXYZMolReader" label="XYZ Reader">
     <Documentation
       short_help="Read XYZ molecular data files."
       long_help="Read XYZ molecular data files into a polygonal dataset.">
       The XYZ reader reads XYZ molecular data files. The expected file extension is .xyz. The output of this reader is a polygonal dataset.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        command="SetFileName"
        animateable="0"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the XYZ reader.
        </Documentation>
     </StringVectorProperty>

     <IntVectorProperty
        name="TimeStep"
        command="SetTimeStep"
        number_of_elements="1"
        animateable="1"
        default_values="0" >
       <IntRangeDomain name="range"/>
       <Documentation>
         This property specifies the timestep the XYZ reader should load.
       </Documentation>
     </IntVectorProperty>
   <!-- End xyzreader -->
   </SourceProxy>

   <SourceProxy name="P3DReader" class="vtkMultiBlockPLOT3DReader"
                label="PLOT3D Reader">
     <Documentation
       short_help="Read PLOT3D files."
       long_help="Read ASCII or binary PLOT3D files.">
       PLOT3D is a plotting package developed at NASA. The PLOT3D reader can read both ASCII and binary PLOT3D files. The default file extension for the geometry files is .xyz, and the default file extension for the solution files is .q. The output of this reader is a multi-block dataset containing curvilinear (structured grid) datasets.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the .xyz (geometry) file name for the PLOT3D reader.
        </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="QFileName"
        command="SetQFileName"
        animateable="0"
        number_of_elements="1">
       <FileListDomain name="files"/>
       <Documentation>
         This property specifies the .q (solution) file name for the PLOT3D reader.
       </Documentation>
     </StringVectorProperty>

     <IntVectorProperty 
        name="BinaryFile" 
        command="SetBinaryFile" 
        number_of_elements="1"
        default_values="1" > 
       <BooleanDomain name="bool"/>
       <Documentation>
         This property indicates whether the data files are binary.
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty 
        name="MultiGrid" 
        command="SetMultiGrid" 
        number_of_elements="1"
        default_values="0" > 
       <BooleanDomain name="bool"/>
       <Documentation>
         This property indicates whether these files have multiple-block information.
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty 
        name="HasByteCount" 
        command="SetHasByteCount" 
        number_of_elements="1"
        default_values="0" > 
       <BooleanDomain name="bool"/>
       <Documentation>
         This property indicates whether this file uses Fortran leading-trailing byte counts.
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty 
        name="IBlanking" 
        command="SetIBlanking" 
        number_of_elements="1"
        default_values="0" > 
       <BooleanDomain name="bool"/>
       <Documentation>
         This property indicates whether this dataset has visibility information.
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty 
        name="TwoDimensionalGeometry" 
        command="SetTwoDimensionalGeometry" 
        number_of_elements="1"
        default_values="0" > 
       <BooleanDomain name="bool"/>
       <Documentation>
         This property indicates whether the data is two- or three-dimensional.
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty 
        name="ForceRead" 
        command="SetForceRead" 
        number_of_elements="1"
        default_values="0" > 
       <BooleanDomain name="bool"/>
       <Documentation>
         This property indicates whether to attempt to read the file even if it appears corrupt
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty 
        name="ByteOrder" 
        command="SetByteOrder" 
        number_of_elements="1"
        default_values="0" >
       <EnumerationDomain name="enum">
         <Entry value="0" text="BigEndian"/>
         <Entry value="1" text="LittleEndian"/>
       </EnumerationDomain>
       <Documentation>
         This property specifies the byte order of any binary file(s).
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty 
        name="Functions" 
        command="AddFunction"
        clean_command="RemoveAllFunctions"
        repeat_command="1"
        number_of_elements_per_command="1">
       <EnumerationDomain name="array_list">
         <!-- <Entry value="100" text="Scalar - Density"/> -->
         <Entry value="110" text="Scalar - Pressure"/>
         <Entry value="120" text="Scalar - Temperature"/>
         <Entry value="130" text="Scalar - Enthalpy"/>
         <Entry value="140" text="Scalar - Internal energy"/>
         <Entry value="144" text="Scalar - Kinetic energy"/>
         <Entry value="153" text="Scalar - Velocity magnitude"/>
         <!-- <Entry value="163" text="Scalar - Stagnation energy"/> -->
         <Entry value="170" text="Scalar - Entropy"/>
         <Entry value="184" text="Scalar - Swirl."/>
         <Entry value="200" text="Vector - Velocity"/>
         <Entry value="201" text="Vector - Vorticity"/>
         <!-- <Entry value="202" text="Vector - Momentum"/> -->
         <Entry value="210" text="Vector - Pressure gradient"/>
       </EnumerationDomain>
       <Documentation>
         This property lists which functions (point-centered arrays) to compute.
       </Documentation>
     </IntVectorProperty>
   <!-- End P3DReader -->
   </SourceProxy>

   <SourceProxy name="PhastaReader" 
                class="vtkPPhastaReader"
                label="Phasta Reader">
     <Documentation
       short_help="Read datasets stored in the Phasta format."
       long_help="Read the parallel Phasta meta-file and the underlying Phasta files.">
       This Phasta reader reads files stored in the Phasta (a CFD package) format. The expected file extension is .pht. The output of this reader is a multipiece data set.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        command="SetFileName"
        animateable="0"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the Phasta reader.
        </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty 
         name="TimestepValues"
         repeatable="1"
         information_only="1">
        <TimeStepsInformationHelper/>
        <Documentation>
          Available timestep values.
        </Documentation>
     </DoubleVectorProperty>
   </SourceProxy>

   <FileSeriesReaderProxy name="stlreader"
                          class="vtkFileSeriesReader"
                          label="Legacy VTK Reader"
                          file_name_method="SetFileName">
     <Documentation
         short_help="Read STL files."
       long_help="Read ASCII or binary stereo lithography (STL) files.">
       The STL reader reads ASCII or binary stereo lithography (STL) files. The expected file extension is .stl. The output of this reader is a polygonal dataset. This reader also supports file series.
     </Documentation>

     <SubProxy>
       <Proxy name="Reader"
              proxygroup="internal_sources" proxyname="stlreadercore">
       </Proxy>
     </SubProxy>

     <StringVectorProperty name="FileNameInfo"
        command="GetCurrentFileName"
        information_only="1" >
        <SimpleStringInformationHelper />
     </StringVectorProperty>

     
     <StringVectorProperty
        name="FileNames"
        clean_command="RemoveAllFileNames"
        command="AddFileName"
        animateable="0"
        number_of_elements="0" 
        repeat_command="1"
        information_property="FileNameInfo" >
        <FileListDomain name="files"/>
       <Documentation>
         The list of files to be read by the reader. If more than 1 file is specified, the reader will switch to file series mode in which it will pretend that it can support time and provide 1 file per time step.
       </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty 
        name="TimestepValues"
        repeatable="1"
        information_only="1">
        <TimeStepsInformationHelper/>
        <Documentation>
          Available timestep values.
        </Documentation>
     </DoubleVectorProperty>
     <!-- End legacyreader_t -->
   </FileSeriesReaderProxy>

   <SourceProxy name="byureader" class="vtkBYUReader" label="BYU Reader">
     <Documentation
       short_help="Read Movie.BYU files."
       long_help="Read Movie.BYU files to produce polygonal data.">
       The BYU reader reads data stored in Movie.BYU format. The expected file extension is .g. The datasets resulting from reading these files are polygonal.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the BYU reader.
        </Documentation>
     </StringVectorProperty>
   <!-- End stlreader -->
   </SourceProxy>

   <SourceProxy name="gaussiancubereader" class="vtkGaussianCubeReader"
                label="Gaussian Cube Reader">
     <Documentation
       short_help="Read Gaussian Cube data files."
       long_help="Produce polygonal data by reading a Gaussian Cube file.">
       The Gaussian Cube reader produces polygonal data by reading data files produced by the Gaussian software package. The expected file extension is .cube.
     </Documentation>

     <OutputPort name="Output" index="0" />
     <OutputPort name="Gridded Data" index="1" />

     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the Gaussian Cube reader.
        </Documentation>
     </StringVectorProperty>

      <DoubleVectorProperty
         name="HBScale"
         command="SetHBScale"
         number_of_elements="1"
         default_values="1.0" >
        <DoubleRangeDomain name="range"/>
        <Documentation>
          A scaling factor to compute bonds with hydrogen atoms.
        </Documentation>
      </DoubleVectorProperty>

      <DoubleVectorProperty
         name="BScale"
         command="SetBScale"
         number_of_elements="1"
         default_values="1.0" >
        <DoubleRangeDomain name="range"/>
        <Documentation>
          A scaling factor to compute bonds between non-hydrogen atoms
        </Documentation>
      </DoubleVectorProperty>
   <!-- End gaussiancubereader -->
   </SourceProxy>

   <SourceProxy name="popreader" class="vtkPOPReader" label="POP Reader">
     <Documentation
       short_help="Read POP data files."
       long_help="Read data files from the Parallel Ocean Program (POP).">
       The POP reader reads data files from the Parallel Ocean Program (POP). The expected file extension is .pop. The output of this reader is a structured grid dataset. 
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the POP Ocean file reader.
        </Documentation>
     </StringVectorProperty>

      <DoubleVectorProperty
         name="Radius"
         command="SetRadius"
         number_of_elements="1"
         default_values="60000" >
        <DoubleRangeDomain name="range"/>
        <Documentation>
          This property specifies the radius of the dataset.
        </Documentation>
      </DoubleVectorProperty>

     <IntVectorProperty 
        name="ClipExtent" 
        command="SetClipExtent" 
        number_of_elements="6"
        default_values="-2147483647 2147483647 -2147483647 2147483647 -2147483647 2147483647" > 
       <IntRangeDomain name="range"/>
       <Documentation>
         This property indicates the minimum and maximum extent in each dimension of the dataset (X, Y, and Z) to read.
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty 
        name="NumberOfGhostLevels" 
        command="SetNumberOfGhostLevels" 
        number_of_elements="1"
        default_values="1" > 
       <IntRangeDomain name="range"/>
       <Documentation>
         This property indicates the number of ghost levels to generate.
       </Documentation>
     </IntVectorProperty>
   <!-- End popreader -->
   </SourceProxy>

   <SourceProxy name="ensightMS" 
                class="vtkPVEnSightMasterServerReader"
                label="EnSight Master Server Reader">
     <Documentation
       short_help="Read parallel EnSight files."
       long_help="Read files in EnSight's Master Server format.">
       The EnSight Master Server reader reads EnSight's parallel files. The master file ususally has a .sos extension and may point to multiple .case files. The output is a multi-block dataset.
     </Documentation>
     <StringVectorProperty
        name="CaseFileName"
        command="SetCaseFileName"
        animateable="0"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the name of the .sos file for the EnSight Master Server reader.
        </Documentation>
     </StringVectorProperty>

     <IntVectorProperty 
        name="ByteOrder" 
        command="SetByteOrder" 
        number_of_elements="1"
        default_values="0" >
       <EnumerationDomain name="enum">
         <Entry value="0" text="BigEndian"/>
         <Entry value="1" text="LittleEndian"/>
       </EnumerationDomain>
       <Documentation>
         This property indicates the byte order of the binary file(s).
       </Documentation>
     </IntVectorProperty>

      <DoubleVectorProperty
         name="SetTimeValue"
         command="SetTimeValue"
         number_of_elements="1"
         default_values="0.0" 
         animateable="1">
        <DoubleRangeDomain name="range"/>
        <Documentation>
          This property indicates which time value to read.
        </Documentation>
      </DoubleVectorProperty>

      <StringVectorProperty 
        name="CellArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Cell"/>
     </StringVectorProperty>

    <StringVectorProperty
        name="CellArrayStatus"
        command="SetCellArrayStatus"
        number_of_elements="0" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0" 
        information_property="CellArrayInfo"
        label="Cell Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="CellArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which cell-centered arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty 
        name="PointArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Point"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayStatus"
        command="SetPointArrayStatus"
        number_of_elements="0" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0" 
        information_property="PointArrayInfo"
        label="Point Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="PointArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which point-centered arrays to read.
       </Documentation>
     </StringVectorProperty>
   <!-- End ensightMS -->
   </SourceProxy>

   <SourceProxy name="ImageReader" 
                class="vtkImageReader"
                label="Image Reader">
     <Documentation
       short_help="Read raw regular rectilinear grid data from a file." 
       long_help="Read raw regular rectilinear grid data from a file. The dimensions and type of the data must be specified.">
       The Image reader reads raw regular rectilinear grid (image/volume) data from a file. Because no metadata is provided, the user must specify information about the size, spacing, dimensionality, etc. about the dataset.
     </Documentation>
     <!-- Unlike most readers, we need to show the "filename" so that users
          can strip off the extension and replace it in the file pattern.
          I'm creating this "Property" hint that has an attribute to force
          whether the given property is shown in the GUI or not. -->
     <Hints>
       <Property name="FilePrefix" show="1"/>
     </Hints>

     <StringVectorProperty
        name="FilePrefix"
        command="SetFilePrefix"
        number_of_elements="1">
       <FileListDomain name="files"/>
       <Documentation>
         The text string contained in this property specifies the file prefix (directory plus common initial part of file name) for the raw binary uniform rectilinear grid dataset.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="FilePattern"
        command="SetFilePattern"
        number_of_elements="1" 
        default_values="%s">
        <Documentation>
          The text string contained in the property specifies the format string to determine the file names necessary for reading this dataset. In creating the filenames, %s will be replaced by the prefix and %d by a digit which represents the slice number in Z. The format string is the same as that used by printf.
        </Documentation>
     </StringVectorProperty>

     <IntVectorProperty 
        name="DataScalarType" 
        command="SetDataScalarType" 
        number_of_elements="1"
        default_values="4" >
       <EnumerationDomain name="enum">
         <Entry value="2" text="char"/>
         <Entry value="3" text="unsigned char"/>
         <Entry value="4" text="short"/>
         <Entry value="5" text="unsigned short"/>
         <Entry value="6" text="int"/>
         <Entry value="7" text="unsigned int"/>
         <Entry value="8" text="long"/>
         <Entry value="9" text="unsigned long"/>
         <Entry value="10" text="float"/>
         <Entry value="11" text="double"/>
       </EnumerationDomain>
       <Documentation>
         The value of this property indicates the scalar type of the pixels/voxels in the file(s): short, int, float ...
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty 
        name="DataByteOrder" 
        command="SetDataByteOrder" 
        number_of_elements="1"
        default_values="0" >
       <EnumerationDomain name="enum">
         <Entry value="0" text="BigEndian"/>
         <Entry value="1" text="LittleEndian"/>
       </EnumerationDomain>
       <Documentation>
         This property indicates the byte order of the binary file(s).
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty 
        name="FileDimensionality"
        command="SetFileDimensionality"
        number_of_elements="1" 
        default_values="3">
       <EnumerationDomain name="enum">
         <Entry value="2" text="2"/>
         <Entry value="3" text="3"/>
       </EnumerationDomain>
       <Documentation>
         This property indicates whether the file(s) in this dataset contain slices (2D) or volumes (3D).
       </Documentation>
     </IntVectorProperty>

      <DoubleVectorProperty
         name="DataOrigin"
         command="SetDataOrigin"
         number_of_elements="3"
         default_values="0.0 0.0 0.0" >
        <DoubleRangeDomain name="range"/>
        <Documentation>
          The coordinate contained in this property specifies the position of the point with index (0,0,0).
        </Documentation>
      </DoubleVectorProperty>

      <DoubleVectorProperty
         name="DataSpacing"
         command="SetDataSpacing"
         number_of_elements="3"
         default_values="1.0 1.0 1.0" >
        <DoubleRangeDomain name="range"/>
        <Documentation>
          This property specifies the size of a voxel in each dimension.
        </Documentation>
      </DoubleVectorProperty>

     <IntVectorProperty 
        name="DataExtent"
        command="SetDataExtent"
        number_of_elements="6" 
        default_values="0 0 0 0 0 0" >
       <IntRangeDomain name="range"/>
       <Documentation>
         This property specifies the minimum and maximum index values of the data in each dimension (xmin, xmax, ymin, ymax, zmin, zmax).
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty 
        name="NumberOfScalarComponents"
        command="SetNumberOfScalarComponents"
        number_of_elements="1" 
        default_values="1" >
       <IntRangeDomain name="range"/>
       <Documentation>
         This property specifies the number of componenets the scalar value at each pixel or voxel has (e.g., RGB - 3 scalar components).
       </Documentation>
     </IntVectorProperty>

     <StringVectorProperty
        name="ScalarArrayName"
        command="SetScalarArrayName"
        number_of_elements="1" 
        default_values="ImageFile">
        <Documentation>
          This property contains a text string listing a name to assign to the point-centered data array read.
        </Documentation>
     </StringVectorProperty>

     <IntVectorProperty name="FileLowerLeft"
                        command="SetFileLowerLeft"
                        number_of_elements="1"
                        default_values="1">
       <BooleanDomain name="bool" />
       <Documentation>
         This property determines whether the data originates in the lower left corner (on) or the upper left corner (off).  Most scientific data is written with a right-handed axes that originates in the lower left corner.  However, several 2D image file formats write the image from the upper left corner.
       </Documentation>
     </IntVectorProperty>
   <!-- End ImageReader -->
   </SourceProxy>
   <SourceProxy name="XdmfReader" 
                class="vtkXdmfReader"
                label="XDMF Reader">
     <Documentation
       short_help="Read XDMF data files."
       long_help="Read XDMF (eXtensible Data Model and Format) files.">
       The XDMF reader reads files in XDMF format. The expected file extension is .xmf. Metadata is stored in the XDMF file using an XML format, and large attribute arrays are stored in a corresponding HDF5 file. The output may be unstructured grid, structured grid, or rectiliner grid.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        command="SetFileName"
        animateable="0"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the XDMF reader.
        </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="GetDomainName"
        command="GetDomainName"
        number_of_elements="1"
        information_only="1">
        <XDMFInformationHelper info_type="domains"/>
     </StringVectorProperty> 

     <StringVectorProperty
        name="SetDomainName"
        command="SetDomainName"
        number_of_elements="1"
        label="Domain Name">
        <StringListDomain name="AvailableDomains"/>
        <Documentation>
          This property lists the domain name.
        </Documentation>
     </StringVectorProperty>


     <StringVectorProperty
        name="GetGridName"
        command="GetGridName"
        number_of_elements="1"
        information_only="1">
        <XDMFInformationHelper info_type="grids"/>
     </StringVectorProperty> 

     <StringVectorProperty
        name="SetGridName"
        command="SetGridName"
        number_of_elements="1"
        label="Grid Name">
        <StringListDomain name="AvailableGrids"/>
        <Documentation>
          This property lists the grid name.
        </Documentation>
     </StringVectorProperty>


     <StringVectorProperty
        name="EnableGrid"
        command="EnableGrid"
        number_of_elements="1" 
        repeat_command="1"
        clean_command="DisableAllGrids" >
        <Documentation>
          This property indicates which grid(s) to enable.
        </Documentation>
     </StringVectorProperty>


     <StringVectorProperty 
        name="CellArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Cell"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="CellArrayStatus"
        command="SetCellArrayStatus"
        number_of_elements="0" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="CellArrayInfo"
        animateable="0"
        label="Cell Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="CellArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which the cell-centered arrays to read.
       </Documentation>
     </StringVectorProperty>


     <StringVectorProperty 
        name="PointArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Point"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayStatus"
        command="SetPointArrayStatus"
        number_of_elements="0" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="PointArrayInfo"
        animateable="0"
        label="Point Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="PointArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which the point-centered arrays to read.
       </Documentation>
     </StringVectorProperty>

      <IntVectorProperty
         name="Stride"
         command="SetStride"
         number_of_elements="3"
         default_values="1 1 1" 
         animateable="0">
        <IntRangeDomain name="range" min="1 1 1" />
        <Documentation>
          If loading structured data, this property indicate the number of indices per dimension (X, Y, or Z) to skip between each point included in this output.
        </Documentation>
      </IntVectorProperty>

     <StringVectorProperty 
        name="ParametersInfo"
        information_only="1">
        <XDMFInformationHelper info_type="parameters"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="ParameterIndex"
        command="SetParameterIndex"
        number_of_elements="0" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        animateable="1">
       <XDMFPropertyDomain name="range">
          <RequiredProperties>
             <Property name="ParametersInfo" function="ParameterRanges"/>
          </RequiredProperties>
       </XDMFPropertyDomain>
       <Documentation>
         This property specifies the parameter index.
       </Documentation>
     </StringVectorProperty>
     
     <IntVectorProperty 
        name="TimeStepRangeInfo"
        command="GetTimeStepRange"
        information_only="1">
       <SimpleIntInformationHelper/>
     </IntVectorProperty>
     <DoubleVectorProperty 
        name="TimestepValues"
        information_only="1">
       <TimeStepsInformationHelper/>
     </DoubleVectorProperty>
     <IntVectorProperty 
        name="TimeStep"
        command="SetTimeStep"
        number_of_elements="1"
        default_values="0"
        animateable="0"
        information_property="TimestepValues">
       <IntRangeDomain name="range">
         <RequiredProperties>
           <Property name="TimeStepRangeInfo" function="Range"/>
         </RequiredProperties>
       </IntRangeDomain>
       <Documentation>
         Set the current timestep.
       </Documentation>
     </IntVectorProperty>
     
   <!-- End XdmfReader -->
   </SourceProxy>
   
#ifdef PARAVIEW_USE_SILO
   <SourceProxy name="SiloReader" 
                class="vtkSiloReader"
                label="Silo Reader">
     <Documentation
        short_help="Read a Silo data file."
        long_help="Reads a Silo data file and generates multi block dataset.">
        The Silo reader loads Silo files and produces multi block data set output.  The default file extension is .silo.
     </Documentation>
     <StringVectorProperty
         name="FileName"
         animateable="0"
         command="SetFileName"
         number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
           This property specifies the file name for the Silo reader.
        </Documentation>
     </StringVectorProperty>
     <StringVectorProperty
         name="TOCString"
         command="GetTOCString"
         information_only="1">
        <Documentation>
           This property is a string representation of the table of contents.
        </Documentation>
        <SimpleStringInformationHelper/>
     </StringVectorProperty>
   <!-- End SiloReader -->
   </SourceProxy>
#endif

   <SourceProxy name="ExodusIIReader" 
                class="vtkPExodusIIReader">
     <Documentation
       short_help="Read Exodus II files."
       long_help="Read an Exodus II file to produce an unstructured grid.">
        The Exodus reader loads Exodus II files and produces an unstructured grid output. The default file extensions are .g, .e, .ex2, .ex2v2, .exo, .gen, .exoII, .exii, .0, .00, .000, and .0000 .
     </Documentation>
     
     <StringVectorProperty
        name="FileName"
        command="SetFileName"
        number_of_elements="1"
        animateable="0">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the Exodus reader.
        </Documentation>
     </StringVectorProperty>

     <StringVectorProperty 
        name="FilePrefixInfo"
        command="GetFilePrefix"
        information_only="1">
        <SimpleStringInformationHelper/>
     </StringVectorProperty>

     <StringVectorProperty
        name="FilePrefix"
        command="SetFilePrefix"
        number_of_elements="1"
        animateable="0"
        information_property="FilePrefixInfo" >
       <FileListDomain name="default_value" optional="1">
          <RequiredProperties>
             <Property name="FilePrefixInfo" function="Prefix"/>
          </RequiredProperties>
       </FileListDomain>
        <Documentation>
          This property specifies the file root used with the file pattern to format a file name. (See the File Pattern property.)
        </Documentation>
     </StringVectorProperty>

     <StringVectorProperty 
        name="FilePatternInfo"
        command="GetFilePattern"
        information_only="1">
        <SimpleStringInformationHelper/>
     </StringVectorProperty>

     <StringVectorProperty
        name="FilePattern"
        command="SetFilePattern"
        number_of_elements="1"
        animateable="0"
        information_property="FilePatternInfo" >
       <FileListDomain name="default_value" optional="1">
          <RequiredProperties>
             <Property name="FilePatternInfo" function="Pattern"/>
          </RequiredProperties>
       </FileListDomain>
       <Documentation>
         This property contains a text string specifying the pattern used to load files. There are two parts to it: the prefix (%s) and the file number (%i). The format used is the same as that used for printf.
       </Documentation>
     </StringVectorProperty>

     <IntVectorProperty 
        name="FileRangeInfo"
        command="GetFileRange"
        information_only="1">
        <SimpleIntInformationHelper/>
     </IntVectorProperty>

     <IntVectorProperty 
        name="FileRange"
        command="SetFileRange"
        number_of_elements="2" 
        default_values="-1 -1"
        animateable="0"
        information_property="FileRangeInfo" >
       <IntRangeDomain name="range">
          <RequiredProperties>
             <Property name="FileRangeInfo" function="Range"/>
          </RequiredProperties>
       </IntRangeDomain>
       <Documentation>
         This property controls the indices of the first and last files to be read.
       </Documentation>
     </IntVectorProperty>

     <StringVectorProperty 
        name="XMLFileNameInfo"
        command="GetXMLFileName"
        information_only="1">
        <SimpleStringInformationHelper/>
     </StringVectorProperty>

     <StringVectorProperty
        name="XMLFileName"
        command="SetXMLFileName"
        number_of_elements="1"
        animateable="0"
        label="XML File Name">
       <FileListDomain name="default_value" optional="1">
          <RequiredProperties>
             <Property name="XMLFileNameInfo" function="XMLFileName"/>
          </RequiredProperties>
       </FileListDomain>
       <Documentation>
         This property specifies the name of an XML file containing part and material descriptions and a mapping to element blocks.
       </Documentation>
     </StringVectorProperty>

     <IntVectorProperty name="HasModeShapes"
                        command="SetHasModeShapes"
                        number_of_elements="1"
                        default_values="0">
       <BooleanDomain name="bool"/>
       <Documentation>
         Some simulations overload the Exodus time steps to represent mode
         shapes.  In this case, it does not make sense to iterate over the
         "time steps", because they are not meant to be played in order.
         Rather, each represents the vibration at a different "mode."
         Setting the value of this property to 1 changes the semantics of the reader to not
         report the time steps to downstream filters.
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty name="AnimateModeShapes"
                        command="SetAnimateModeShapes"
                        number_of_elements="1"
                        default_values="1"
                        animateable="0"
                        label="Animate Vibrations">
       <BooleanDomain name="bool"/>
       <Documentation>
         If this flag is on and HasModeShapes is also on, then this reader
         will report a continuous time range [0,1] and animate the
         displacements in a periodic sinusoid.  If this flag is off and
         HasModeShapes is on, this reader ignores time.  This flag has no
         effect if HasModeShapes is off.
       </Documentation>
     </IntVectorProperty>

     <!-- The following two properties magically send time information -->
     <!-- to the animation panel.  Usually you only need one (the former -->
     <!-- for discrete time, the latter for continuous time), but changing -->
     <!-- the HasModeShapes ivar switches between discrete and continuous -->
     <!-- time. -->
     <DoubleVectorProperty 
         name="TimestepValues" 
         repeatable="1"
         information_only="1">
       <TimeStepsInformationHelper/>
     </DoubleVectorProperty>
     <DoubleVectorProperty name="TimeRange" information_only="1">
       <TimeRangeInformationHelper/>
     </DoubleVectorProperty>

     <IntVectorProperty name="ModeShape"
                        command="SetTimeStep"
                        number_of_elements="1"
                        default_values="0"
                        information_property="TimestepValues">
       <IntRangeDomain name="range">
         <RequiredProperties>
           <Property name="TimeStepRangeInfo" function="Range"/>
         </RequiredProperties>
       </IntRangeDomain>
       <Documentation>
         Specify the current mode shape when HasModeShapes in on.
       </Documentation>
     </IntVectorProperty>

     <Property name="Refresh"
               command="UpdateTimeInformation"
               is_internal="1">
       <Documentation>
          Read in more time information if its available. Useful while running a simulation.
       </Documentation>
     </Property>
     
     <StringVectorProperty 
        name="EdgeBlockArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="EdgeBlock"/>
     </StringVectorProperty>
     
     <StringVectorProperty
        name="EdgeBlockArrayStatus"
        label="Edge Blocks"
        command="SetEdgeBlockArrayStatus"
        number_of_elements="2" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0" 
        information_property="EdgeBlockArrayInfo"> 
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="EdgeBlockArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
     </StringVectorProperty>
     
     <StringVectorProperty 
        name="FaceBlockArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="FaceBlock"/>
     </StringVectorProperty>
     
     <StringVectorProperty
        name="FaceBlockArrayStatus"
        label="Face Blocks"
        command="SetFaceBlockArrayStatus"
        number_of_elements="2" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0" 
        information_property="FaceBlockArrayInfo"> 
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="FaceBlockArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
     </StringVectorProperty>

     <IntVectorProperty name="SILUpdateStamp"
        command="GetSILUpdateStamp"
        information_only="1">
        <SimpleIntInformationHelper />
        <Documentation>
          Information property indicating the update stamp of the SIL. Every
          time the SIL is rebuild, this time stamp is changed.
        </Documentation>
     </IntVectorProperty>

     <StringVectorProperty 
        name="ElementBlockArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="GlobalResult"/>
        <SILInformationHelper
          timestamp_command="GetSILUpdateStamp"
          subtree="Blocks">
        </SILInformationHelper>
     </StringVectorProperty>
     
     <StringVectorProperty
        name="ElementBlockArrayStatus"
        label="Element Blocks"
        command="SetElementBlockArrayStatus"
        number_of_elements="2" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="ElementBlockArrayInfo" >
       <SILDomain name="array_list" subtree="Blocks">
          <RequiredProperties>
             <Property name="ElementBlockArrayInfo" function="ArrayList" />
          </RequiredProperties>
       </SILDomain>
     </StringVectorProperty>

     <StringVectorProperty 
        name="GlobalResultArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="GlobalResult"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="GlobalResultArrayStatus"
        label="Global Variables"
        command="SetGlobalResultArrayStatus"
        number_of_elements="2" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="GlobalResultArrayInfo"> 
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="GlobalResultArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
     </StringVectorProperty>
     
     <StringVectorProperty 
        name="PointResultArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="PointResult"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointResultArrayStatus"
        label="Point Variables"
        command="SetPointResultArrayStatus"
        number_of_elements="2" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="PointResultArrayInfo"> 
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="PointResultArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
     </StringVectorProperty>
     
     <StringVectorProperty 
        name="EdgeResultArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="EdgeResult"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="EdgeResultArrayStatus"
        label="Edge Variables"
        command="SetEdgeResultArrayStatus"
        number_of_elements="2" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="EdgeResultArrayInfo"> 
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="EdgeResultArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
     </StringVectorProperty>
     
     <StringVectorProperty 
        name="FaceResultArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="FaceResult"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="FaceResultArrayStatus"
        label="Face Variables"
        command="SetFaceResultArrayStatus"
        number_of_elements="2" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="FaceResultArrayInfo"> 
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="FaceResultArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
     </StringVectorProperty>
     
     <StringVectorProperty 
        name="ElementResultArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="ElementResult"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="ElementResultArrayStatus"
        label="Element Variables"
        command="SetElementResultArrayStatus"
        number_of_elements="2" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0" 
        information_property="ElementResultArrayInfo"> 
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="ElementResultArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
     </StringVectorProperty>
      
     <StringVectorProperty 
        name="NodeMapInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="NodeMap"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="NodeMapArrayStatus"
        command="SetNodeMapArrayStatus"
        number_of_elements="2" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="NodeMapInfo"> 
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="NodeMapInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
     </StringVectorProperty>

      <StringVectorProperty 
        name="EdgeMapInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="EdgeMap"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="EdgeMapArrayStatus"
        command="SetEdgeMapArrayStatus"
        number_of_elements="2" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="EdgeMapInfo"> 
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="EdgeMapInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
     </StringVectorProperty>

      <StringVectorProperty 
        name="FaceMapInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="FaceMap"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="FaceMapArrayStatus"
        command="SetFaceMapArrayStatus"
        number_of_elements="2" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="FaceMapInfo"> 
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="FaceMapInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
     </StringVectorProperty>

      <StringVectorProperty 
        name="ElementMapInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="ElementMap"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="ElementMapArrayStatus"
        command="SetElementMapArrayStatus"
        number_of_elements="2" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="ElementMapInfo"> 
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="ElementMapInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
     </StringVectorProperty>
      
     <StringVectorProperty 
        name="NodeSetInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="NodeSet"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="NodeSetArrayStatus"
        command="SetNodeSetArrayStatus"
        number_of_elements="2" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="NodeSetInfo"> 
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="NodeSetInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
     </StringVectorProperty>
     
     <StringVectorProperty 
        name="SideSetInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="SideSet"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="SideSetArrayStatus"
        command="SetSideSetArrayStatus"
        number_of_elements="2" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="SideSetInfo"> 
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="SideSetInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
     </StringVectorProperty>
     
     <StringVectorProperty 
        name="FaceSetInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="FaceSet"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="FaceSetArrayStatus"
        command="SetFaceSetArrayStatus"
        number_of_elements="2" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="FaceSetInfo"> 
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="FaceSetInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
     </StringVectorProperty>
     
     <StringVectorProperty 
        name="EdgeSetInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="EdgeSet"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="EdgeSetArrayStatus"
        command="SetEdgeSetArrayStatus"
        number_of_elements="2" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="EdgeSetInfo"> 
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="EdgeSetInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
     </StringVectorProperty>
     
     <StringVectorProperty 
        name="ElementSetInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="ElementSet"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="ElementSetArrayStatus"
        command="SetElementSetArrayStatus"
        number_of_elements="2" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="ElementSetInfo"> 
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="ElementSetInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
     </StringVectorProperty>

     <StringVectorProperty 
        name="ElementSetResultArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="ElementSetResult"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="ElementSetResultArrayStatus"
        command="SetElementSetResultArrayStatus"
        number_of_elements="2" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="ElementSetResultArrayInfo"> 
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="ElementSetResultArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
     </StringVectorProperty>
     
     <StringVectorProperty 
        name="SideSetResultArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="SideSetResult"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="SideSetResultArrayStatus"
        command="SetSideSetResultArrayStatus"
        number_of_elements="2" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="SideSetResultArrayInfo"> 
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="SideSetResultArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
     </StringVectorProperty>
     
     <StringVectorProperty 
        name="FaceSetResultArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="FaceSetResult"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="FaceSetResultArrayStatus"
        command="SetFaceSetResultArrayStatus"
        number_of_elements="2" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="FaceSetResultArrayInfo"> 
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="FaceSetResultArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
     </StringVectorProperty>
     
     <StringVectorProperty 
        name="EdgeSetResultArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="EdgeSetResult"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="EdgeSetResultArrayStatus"
        command="SetEdgeSetResultArrayStatus"
        number_of_elements="2" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="EdgeSetResultArrayInfo"> 
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="EdgeSetResultArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
     </StringVectorProperty>
     
     <StringVectorProperty 
        name="NodeSetResultArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="NodeSetResult"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="NodeSetResultArrayStatus"
        command="SetNodeSetResultArrayStatus"
        number_of_elements="2" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="NodeSetResultArrayInfo"> 
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="NodeSetResultArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
     </StringVectorProperty>

     <IntVectorProperty 
        name="ApplyDisplacements" 
        command="SetApplyDisplacements" 
        number_of_elements="1"
        default_values="1" > 
       <BooleanDomain name="bool"/>
       <Documentation>
         Geometric locations can include displacements. When this option is on, the nodal positions are 'displaced' by the standard exodus displacement vector. If displacements are turned 'off', the user can explicitly add them by applying a warp filter.
       </Documentation>
     </IntVectorProperty>

     <DoubleVectorProperty 
        name="DisplacementMagnitude" 
        command="SetDisplacementMagnitude" 
        number_of_elements="1"
        default_values="1" > 
       <DoubleRangeDomain name="range"/>
       <Documentation>
         When displacements are being applied, they are scaled by this amount.  Set to 1 for no scaling.
       </Documentation>
     </DoubleVectorProperty>
     
     <IntVectorProperty 
        name="GenerateObjectIdCellArray" 
        command="SetGenerateObjectIdCellArray" 
        number_of_elements="1"
        default_values="1" > 
       <BooleanDomain name="bool"/>
     </IntVectorProperty>

     <IntVectorProperty 
        name="GenerateGlobalNodeIdArray" 
        command="SetGenerateGlobalNodeIdArray" 
        number_of_elements="1"
        default_values="1" > 
       <BooleanDomain name="bool"/>
     </IntVectorProperty>
     
     <IntVectorProperty 
        name="GenerateGlobalElementIdArray" 
        command="SetGenerateGlobalElementIdArray" 
        number_of_elements="1"
        default_values="1" > 
       <BooleanDomain name="bool"/>
     </IntVectorProperty>

     <IntVectorProperty 
        name="GenerateFileIdArray" 
        command="SetGenerateFileIdArray" 
        number_of_elements="1"
        default_values="0" > 
       <BooleanDomain name="bool"/>
     </IntVectorProperty>

     <IntVectorProperty 
        name="ExodusModelMetadata" 
        command="SetExodusModelMetadata" 
        number_of_elements="1"
        default_values="0" > 
       <BooleanDomain name="bool"/>
     </IntVectorProperty>

     <Hints>
       <Property name="Refresh" show="0"/>
     </Hints>

   <!-- End ExodusIIReader -->
   </SourceProxy>

   <FileSeriesReaderProxy name="ExodusRestartReader"
                          class="vtkExodusFileSeriesReader"
                          label="Restarted Sim Exodus Reader"
                          file_name_method="SetFileName">
     <Documentation short_help="Read Exodus files from simulation restarts."
                    long_help="Read collections of Exodus output files from simulations that were restarted.">
       When a simulation that outputs exodus files is restarted, typically you get a new set of output files.  When you read them in your visualization, you often want to string these file sets together as if it was one continuous dump of files.  This reader allows you to specify a metadata file that will implicitly string the files together.
     </Documentation>
     <SubProxy>
       <Proxy name="Reader" proxygroup="sources" proxyname="ExodusIIReader" />
       <ExposedProperties>
         <Property name="XMLFileNameInfo" />
         <Property name="XMLFileName" />
         <Property name="HasModeShapes" />
         <Property name="ModeShape" />
         <Property name="AnimateModeShapes" />
         <Property name="Refresh" />
         <Property name="SILUpdateStamp" />
         <Property name="EdgeBlockArrayInfo" />
         <Property name="EdgeBlockArrayStatus" />
         <Property name="FaceBlockArrayInfo" />
         <Property name="FaceBlockArrayStatus" />
         <Property name="ElementBlockArrayStatus" />
         <Property name="GlobalResultArrayInfo" />
         <Property name="GlobalResultArrayStatus" />
         <Property name="PointResultArrayInfo" />
         <Property name="PointResultArrayStatus" />
         <Property name="EdgeResultArrayInfo" />
         <Property name="EdgeResultArrayStatus" />
         <Property name="FaceResultArrayInfo" />
         <Property name="FaceResultArrayStatus" />
         <Property name="ElementResultArrayInfo" />
         <Property name="ElementResultArrayStatus" />
         <Property name="NodeMapInfo" />
         <Property name="NodeMapArrayStatus" />
         <Property name="EdgeMapInfo" />
         <Property name="EdgeMapArrayStatus" />
         <Property name="FaceMapInfo" />
         <Property name="FaceMapArrayStatus" />
         <Property name="ElementMapInfo" />
         <Property name="ElementMapArrayStatus" />
         <Property name="NodeSetInfo" />
         <Property name="NodeSetArrayStatus" />
         <Property name="SideSetInfo" />
         <Property name="SideSetArrayStatus" />
         <Property name="FaceSetInfo" />
         <Property name="FaceSetArrayStatus" />
         <Property name="EdgeSetInfo" />
         <Property name="EdgeSetArrayStatus" />
         <Property name="ElementSetInfo" />
         <Property name="ElementSetArrayStatus" />
         <Property name="ElementSetResultArrayInfo" />
         <Property name="ElementSetResultArrayStatus" />
         <Property name="SideSetResultArrayInfo" />
         <Property name="SideSetResultArrayStatus" />
         <Property name="FaceSetResultArrayInfo" />
         <Property name="FaceSetResultArrayStatus" />
         <Property name="EdgeSetResultArrayInfo" />
         <Property name="EdgeSetResultArrayStatus" />
         <Property name="NodeSetResultArrayInfo" />
         <Property name="NodeSetResultArrayStatus" />
         <Property name="ApplyDisplacements" />
         <Property name="DisplacementMagnitude" />
         <Property name="GenerateObjectIdCellArray" />
         <Property name="GenerateGlobalNodeIdArray" />
         <Property name="GenerateGlobalElementIdArray" />
         <Property name="ExodusModelMetadata" />
       </ExposedProperties>
     </SubProxy>

     <StringVectorProperty name="FileName"
                           animateable="0"
                           command="SetMetaFileName"
                           number_of_elements="1">
       <FileListDomain name="files" />
       <Documentation>
         This points to a special metadata file that lists the output files for each restart.
       </Documentation>
     </StringVectorProperty>

     <IntVectorProperty name="UseMetaFile"
                        command="SetUseMetaFile"
                        number_of_elements="1"
                        default_values="1">
       <BooleanDomain name="bool" />
       <Documentation>
         This hidden property must always be set to 1 for this proxy to work.
       </Documentation>
     </IntVectorProperty>

     <DoubleVectorProperty name="TimestepValues" 
                           repeatable="1"
                           information_only="1">
       <TimeStepsInformationHelper/>
     </DoubleVectorProperty>

     <Hints>
       <!-- This property is here simply to set it. -->
       <Property name="UseMetaFile" show="0" />
       <!-- This is for special GUI control. -->
       <Property name="Refresh" show="0"/>
     </Hints>
     <!-- ExodusRestartReader -->
   </FileSeriesReaderProxy>


   <SourceProxy name="AVSucdReader" 
                class="vtkAVSucdReader"
                label="AVS UCD Reader">
     <Documentation
       short_help="Read a dataset in AVS UCD format."
       long_help="Read binary or ASCII files stored in AVS UCD format.">
       The AVS UCD reader reads binary or ASCII files stored in AVS UCD format.
       The default file extension is .inp. The output of this reader is
       unstructured grid.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the AVS UCD reader.
        </Documentation>
     </StringVectorProperty>

     <StringVectorProperty 
        name="CellArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Cell"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="CellArrayStatus"
        command="SetCellArrayStatus"
        number_of_elements="2" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0" 
        information_property="CellArrayInfo"
        label="Cell Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="CellArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property contains a list of the cell-centered arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty 
        name="PointArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Point"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayStatus"
        command="SetPointArrayStatus"
        number_of_elements="2" 
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0" 
        information_property="PointArrayInfo"
        label="Point Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="PointArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property contains a list of the point-centered arrays to read.
       </Documentation>
     </StringVectorProperty>
   <!-- End AVSucdReader -->
   </SourceProxy>

   <FileSeriesReaderProxy name="AVSucdSeriesReader"
                          class="vtkFileSeriesReader"
                          label="AVS UCD Reader"
                          file_name_method="SetFileName">
     <Documentation
       short_help="Read a dataset in AVS UCD format."
       long_help="Read binary or ASCII files stored in AVS UCD format.">
       The AVS UCD reader reads binary or ASCII files stored in AVS UCD format.
       The default file extension is .inp. The output of this reader is
       unstructured grid. This supports reading a file series.
     </Documentation>

     <SubProxy>
       <Proxy name="Reader"
         proxygroup="sources" proxyname="AVSucdReader">
       </Proxy>
       <ExposedProperties>
          <Property name="CellArrayInfo" />
          <Property name="CellArrayStatus" />
          <Property name="PointArrayInfo" />
          <Property name="PointArrayStatus" />
       </ExposedProperties>
     </SubProxy>

     <StringVectorProperty name="FileNameInfo"
        command="GetCurrentFileName"
        information_only="1" >
        <SimpleStringInformationHelper />
     </StringVectorProperty>


     <StringVectorProperty
        name="FileNames"
        clean_command="RemoveAllFileNames"
        command="AddFileName"
        animateable="0"
        number_of_elements="0" 
        repeat_command="1"
        information_property="FileNameInfo" >
        <FileListDomain name="files"/>
       <Documentation>
         The list of files to be read by the reader. If more than 1 file is
         specified, the reader will switch to file series mode in which it will
         pretend that it can support time and provide 1 file per time step.
       </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty 
        name="TimestepValues"
        repeatable="1"
        information_only="1">
        <TimeStepsInformationHelper/>
        <Documentation>
          Available timestep values.
        </Documentation>
     </DoubleVectorProperty>
   <!-- End of AVSucdSeriesReader -->
   </FileSeriesReaderProxy>

   <SourceProxy name="Facet Reader" 
                class="vtkFacetReader">
     <Documentation
       short_help="Read a dataset in Facet format."
       long_help="Read ASCII files stored in Facet format.">
       The Facet Reader reads files in Facet format: a simple ASCII file format listing point coordinates and connectivity between these points. The default file extension is .facet. The output of the Facet Reader is polygonal.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the Facet reader.
        </Documentation>
     </StringVectorProperty>
   <!-- End Facet Reader -->
   </SourceProxy>

   <SourceProxy name="Meta Image Reader" 
                class="vtkMetaImageReader">
     <Documentation
       short_help="Read UNC meta image data."
       long_help="Read binary UNC meta image data.">
       The Meta Image Reader reads binary UNC meta image data, and produces uniform rectilinear (image/volume) data. The default file extensions are .mhd and .mha.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the Meta Image reader.
        </Documentation>
     </StringVectorProperty>
   <!-- End Meta Image Reader -->
   </SourceProxy>

   <SourceProxy name="PNGReader" 
                class="vtkPNGReader"
                label="PNG Reader">
     <Documentation
       short_help="Read a PNG file."
       long_help="Read a PNG file into an image data.">
       The PNG reader reads PNG (Portable Network Graphics) files, and the output is a uniform rectilinear (image/volume) dataset. The default file extension is .png.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the PNG reader.
        </Documentation>
     </StringVectorProperty>
   <!-- End PNGReader -->
   </SourceProxy>

  <SourceProxy name="TIFFReader" 
                class="vtkTIFFReader"
                label="TIFF Reader">
     <Documentation
       short_help="Read a TIFF file."
       long_help="Read a TIFF file into an image data.">
       The TIFF reader reads TIFF (Tagged Image File Format) files, and the output is a uniform rectilinear (image/volume) dataset. The default file extension is .png.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the TIFF reader.
        </Documentation>
     </StringVectorProperty>
   <!-- End TIFFReader -->
   </SourceProxy>

   <SourceProxy name="SESAMEReader"
                class="vtkSESAMEReader"
                label="SESAME Reader">
     <Documentation
       short_help="Read SESAME data files."
       long_help="Read SESAME data files, producing rectilinear grids.">
       The SESAME reader reads SESAME data files, and outputs rectilinear grids. The expected file extension is .sesame.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        command="SetFileName"
        animateable="0"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the SESAME reader.
        </Documentation>
     </StringVectorProperty>
     <IntVectorProperty
         name="TableId"
         command="SetTable"
         number_of_elements="1"
         default_values="-1">
         <EnumerationDomain name="enum">
           <RequiredProperties>
             <Property name="TableIds" function="Enumeration"/>
          </RequiredProperties>
         </EnumerationDomain>
         <Documentation>
           This proeprty indicates which table to read.
         </Documentation>
     </IntVectorProperty>
     <IntVectorProperty
         name="TableIds"
         command="GetTableIdsAsArray"
         information_only="1">
         <IntArrayInformationHelper />
     </IntVectorProperty>
     <StringVectorProperty
         name="TableArrayInfo"
         information_only="1">
         <ArraySelectionInformationHelper attribute_name="Table"/>
     </StringVectorProperty>
     <!-- End SESAMEReader -->
   </SourceProxy>

    <!-- Beginning of FOAM Reader -->
    <SourceProxy name="OpenFOAMReader" 
                    class="vtkOpenFOAMReader">
      <Documentation
        short_help="Reads a dataset in OpenFOAM format."
        long_help="Reads a dataset in OpenFOAM format." >
        vtkOpenFOAMReader creates an multiblock dataset. It reads a controlDict
        file, mesh information, and time dependent data.  The controlDict file
        contains timestep information. The polyMesh folders contain mesh information
        The time folders contain transient data for the cells  Each folder can
        contain any number of data files.
      </Documentation>
      <StringVectorProperty name="FileName"
                            command="SetFileName"
                            animateable="0"
                            number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          Set the file name for the OpenFOAM reader.
        </Documentation>
      </StringVectorProperty>
      <StringVectorProperty name="CellArrayInfo"
                            information_only="1">
        <ArraySelectionInformationHelper attribute_name="Cell"/>
      </StringVectorProperty>
      <StringVectorProperty name="CellArrayStatus"
                            command="SetCellArrayStatus"
                            number_of_elements="0" 
                            repeat_command="1"
                            number_of_elements_per_command="2"
                            element_types="2 0" 
                            information_property="CellArrayInfo"
                            label="Cell Arrays">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property name="CellArrayInfo" function="ArrayList"/>
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>
          Select which cell-centered arrays to read.
        </Documentation>
      </StringVectorProperty>
      <IntVectorProperty name="TimeStepRangeInfo"
                         command="GetTimeStepRange"
                         information_only="1">
        <SimpleIntInformationHelper/>
      </IntVectorProperty>
      <IntVectorProperty name="TimeStep"
                           command="SetTimeStep"
                           number_of_elements="1"
                           animateable="1"
                           default_values="0">
        <IntRangeDomain name="range">
          <RequiredProperties>
            <Property name="TimeStepRangeInfo" function="Range"/>
          </RequiredProperties>
        </IntRangeDomain>
        <Documentation>
          Set the current timestep.
        </Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty 
          name="TimestepValues"
          repeatable="1"
          information_only="1">
        <TimeStepsInformationHelper/>
      </DoubleVectorProperty>
    </SourceProxy>
    <!-- End of foam Reader -->

    <!-- Beginning of MFIX Reader -->
    <SourceProxy name="MFIXReader" class="vtkMFIXReader">
      <Documentation
        short_help="Reads a dataset in MFIX file format."
        long_help="Reads a dataset in MFIX file format." >
        vtkMFIXReader creates an unstructured grid dataset. It reads a restart
        file and a set of sp files.  The restart file contains the mesh 
        information.  MFIX meshes are either cylindrical or rectilinear, but 
        this reader will convert them to an unstructured grid.  The sp files 
        contain transient data for the cells.  Each sp file has one or more 
        variables stored inside it.
      </Documentation>
      <StringVectorProperty name="FileName" 
                            command="SetFileName" 
                            animateable="0" 
                            number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          Set the file name for the MFIX reader.
        </Documentation>
      </StringVectorProperty>

      <StringVectorProperty name="CellArrayInfo"
                           information_only="1">
        <ArraySelectionInformationHelper attribute_name="Cell"/>
      </StringVectorProperty>

      <StringVectorProperty name="CellArrayStatus"
                            command="SetCellArrayStatus"
                            number_of_elements="0"
                            repeat_command="1" 
                            number_of_elements_per_command="2"
                            element_types="2 0"
                            information_property="CellArrayInfo"
                            label="Cell Arrays">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property name="CellArrayInfo" function="ArrayList"/>
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>
          Select which cell-centered arrays to read.
        </Documentation>
      </StringVectorProperty>

      <DoubleVectorProperty 
          name="TimestepValues" 
          repeatable="1"
          information_only="1">
       <TimeStepsInformationHelper/>
      </DoubleVectorProperty>
    </SourceProxy>
    <!-- End of MFIX Reader -->

   <!-- Beginning of FLUENT Reader -->
   <SourceProxy name="FLUENTReader"
                class="vtkFLUENTReader">
     <Documentation
        short_help="Reads a dataset in Fluent file format."
        long_help="Reads a dataset in Fluent file format." >
        FLUENTReader creates an unstructured grid dataset. It reads .cas and
        .dat files stored in FLUENT native format.
     </Documentation>
     <StringVectorProperty name="FileName"
                           command="SetFileName"
                           animateable="0"
                           number_of_elements="1">
       <FileListDomain name="files"/>
       <Documentation>
         Set the file  name for the FLUENT reader.
       </Documentation>
     </StringVectorProperty>
     <StringVectorProperty name="CellArrayInfo"
                           information_only="1">
       <ArraySelectionInformationHelper attribute_name="Cell"/>
     </StringVectorProperty>
     <StringVectorProperty name="CellArrayStatus"
                           command="SetCellArrayStatus"
                           number_of_elements="0"
                           repeat_command="1" 
                           number_of_elements_per_command="2"
                           element_types="2 0"
                           information_property="CellArrayInfo"
                           label="Cell Arrays">
       <ArraySelectionDomain name="array_list">
         <RequiredProperties>
           <Property name="CellArrayInfo"
                     function="ArrayList"/>
         </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         Select which cell-centered arrays to read.
       </Documentation>
     </StringVectorProperty>
   </SourceProxy>
   <!-- End of FLUENT Reader -->

   <!-- Beginning of LSDyna Reader -->
   <SourceProxy name="LSDynaReader" class="vtkLSDynaReader">
     <Documentation
      short_help="Read LS-Dyna databases (d3plot)."
      long_help="Read LS-Dyna databases (d3plot)." >
      This reader reads LS-Dyna databases.
     </Documentation>

     <StringVectorProperty name="FileName" 
                           command="SetFileName" 
                           animateable="0"
                           number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          Set the file name for the LSDyna reader.
        </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty 
         name="TimestepValues" 
         repeatable="1"
         information_only="1">
       <TimeStepsInformationHelper/>
     </DoubleVectorProperty>

     <StringVectorProperty name="SolidArrayInfo" information_only="1">
        <ArraySelectionInformationHelper attribute_name="Solid"/>
     </StringVectorProperty>

     <StringVectorProperty name="SolidArrayStatus" 
                           command="SetSolidArrayStatus" 
                           number_of_elements="2" 
                           repeat_command="1"
                           number_of_elements_per_command="2" 
                           element_types="2 0" 
                           information_property="SolidArrayInfo"
                           label="Solid Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="SolidArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         Select which solid arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty name="ThickShellArrayInfo" information_only="1">
        <ArraySelectionInformationHelper attribute_name="ThickShell"/>
     </StringVectorProperty>

     <StringVectorProperty name="ThickShellArrayStatus" 
                           command="SetThickShellArrayStatus" 
                           number_of_elements="2" 
                           repeat_command="1"
                           number_of_elements_per_command="2" 
                           element_types="2 0" 
                           information_property="ThickShellArrayInfo"
                           label="Thick Shell Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="ThickShellArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         Select which thick shell arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty name="ShellArrayInfo" information_only="1">
        <ArraySelectionInformationHelper attribute_name="Shell"/>
     </StringVectorProperty>

     <StringVectorProperty name="ShellArrayStatus" 
                           command="SetShellArrayStatus"
                           number_of_elements="2" 
                           repeat_command="1"
                           number_of_elements_per_command="2" 
                           element_types="2 0" 
                           information_property="ShellArrayInfo"
                           label="Shell Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="ShellArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         Select which shell arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty name="RigidBodyArrayInfo" information_only="1">
        <ArraySelectionInformationHelper attribute_name="RigidBody"/>
     </StringVectorProperty>

     <StringVectorProperty name="RigidBodyArrayStatus" 
                           command="SetRigidBodyArrayStatus" 
                           number_of_elements="2" 
                           repeat_command="1"
                           number_of_elements_per_command="2" 
                           element_types="2 0" 
                           information_property="RigidBodyArrayInfo"
                           label="Rigid Body Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="RigidBodyArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         Select which rigid body arrays to load.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty name="RoadSurfaceArrayInfo" information_only="1">
        <ArraySelectionInformationHelper attribute_name="RoadSurface"/>
     </StringVectorProperty>

     <StringVectorProperty name="RoadSurfaceArrayStatus" 
                           command="SetRoadSurfaceArrayStatus" 
                           number_of_elements="2" 
                           repeat_command="1"
                           number_of_elements_per_command="2"
                           element_types="2 0" 
                           information_property="RoadSurfaceArrayInfo"
                           label="Road Surface Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="RoadSurfaceArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         Select which road surface arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty name="BeamArrayInfo" information_only="1">
        <ArraySelectionInformationHelper attribute_name="Beam"/>
     </StringVectorProperty>

     <StringVectorProperty name="BeamArrayStatus" 
                           command="SetBeamArrayStatus" 
                           number_of_elements="2" 
                           repeat_command="1"
                           number_of_elements_per_command="2" 
                           element_types="2 0" 
                           information_property="BeamArrayInfo"
                           label="Beam Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="BeamArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         Select which beam arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty name="ParticleArrayInfo" information_only="1">
        <ArraySelectionInformationHelper attribute_name="Particle"/>
     </StringVectorProperty>

     <StringVectorProperty name="ParticleArrayStatus" 
                           command="SetParticleArrayStatus" 
                           number_of_elements="2" 
                           repeat_command="1"
                           number_of_elements_per_command="2" 
                           element_types="2 0" 
                           information_property="ParticleArrayInfo"
                           label="Particle Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="ParticleArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         Select which particle arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty name="PointArrayInfo" information_only="1">
        <ArraySelectionInformationHelper attribute_name="Point"/>
     </StringVectorProperty>

     <StringVectorProperty name="PointArrayStatus" 
                           command="SetPointArrayStatus" 
                           number_of_elements="2" repeat_command="1"
                           number_of_elements_per_command="2" 
                           element_types="2 0" 
                           information_property="PointArrayInfo"
                           label="Point Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="PointArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         Select which point-centered arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty name="PartArrayInfo" information_only="1">
        <ArraySelectionInformationHelper attribute_name="Part"/>
     </StringVectorProperty>

     <StringVectorProperty name="PartArrayStatus" 
                           command="SetPartArrayStatus" 
                           number_of_elements="2" 
                           repeat_command="1"
                           number_of_elements_per_command="2" 
                           element_types="2 0" 
                           information_property="PartArrayInfo"
                           label="Part Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="PartArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         Select which part arrays to read.
       </Documentation>
     </StringVectorProperty>

     <IntVectorProperty name="DeformedMesh" 
                        command="SetDeformedMesh" 
                        number_of_elements="1" 
                        default_values="1" >
       <BooleanDomain name="bool"/>
       <Documentation>
         Should the mesh be deformed over time (if the Deflection node array is set to load)?
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty name="RemoveDeletedCells" 
                        command="SetRemoveDeletedCells" 
                        number_of_elements="1" 
                        default_values="1" >
       <BooleanDomain name="bool"/>
       <Documentation>
         Should cells that have been deleted (failed structurally, for example) be removed from the mesh?
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty name="SplitByMaterialId" 
                        command="SetSplitByMaterialId"
                        number_of_elements="1" 
                        default_values="0"
                        label="Split by Material Id">
       <BooleanDomain name="bool"/>
       <Documentation>
         Should each material have its own mesh, or should there be one mesh for all materials?
       </Documentation>
     </IntVectorProperty>

   </SourceProxy>
   <!-- End of LSDyna Reader -->

    <SourceProxy name="netCDFReader"
                 class="vtkNetCDFCOARDSReader"
                 label="NetCDF Reader">
      <Documentation short_help="Read regular arrays from netCDF files."
                     long_help="Read regular arrays from netCDF files.  Will also read any topological information specified byt he COARDS convention.">
        Reads arrays from netCDF files into structured VTK data sets.  In
        the absence of any other information, the files will be read as
        image data.  This reader will also look for meta information
        specified by the COARDS convention that specify things like
        topology and time.  This information can cause the output to be a
        nonuniform rectilinear grid or curvilinear (structured) grid.
        Details on the COARDS convention can be found at
        http://ferret.wrc.noaa.gov/noaa_coop/coop_cdf_profile.html.
      </Documentation>

      <StringVectorProperty name="FileName"
                            command="SetFileName"
                            animateable="0"
                            number_of_elements="1">
        <FileListDomain name="files" />
        <Documentation>
          The name of the file to load.
        </Documentation>
      </StringVectorProperty>

      <StringVectorProperty name="VariableArrayInfo"
                            information_only="1">
        <ArraySelectionInformationHelper attribute_name="Variable"/>
      </StringVectorProperty>

      <StringVectorProperty name="VariableArrayStatus"
                            command="SetVariableArrayStatus"
                            number_of_elements="0"
                            repeat_command="1"
                            number_of_elements_per_command="2"
                            element_types="2 0"
                            information_property="VariableArrayInfo"
                            label="Variables">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property name="VariableArrayInfo" function="ArrayList" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>
          This property lists which netCDF variables to load.
        </Documentation>
      </StringVectorProperty>

      <IntVectorProperty name="SphericalCoordinates"
                         command="SetSphericalCoordinates"
                         animateable="0"
                         number_of_elements="1"
                         default_values="1">
        <BooleanDomain name="bool" />
        <Documentation>
          If on, then 3D data with latitude/longitude dimensions will be
          read in as curvilinear data shaped like spherical coordinates.
          If false, then the data will always be read in Cartesian
          coordinates.
        </Documentation>
      </IntVectorProperty>

      <DoubleVectorProperty name="TimestepValues"
                            repeatable="1"
                            information_only="1">
        <TimeStepsInformationHelper />
        <Documentation>
          This magic property sends time information to the animation
          panel.  ParaView will then automatically set up the animation to
          visit the time steps defined in the file.
        </Documentation>
      </DoubleVectorProperty>

    </SourceProxy> <!-- netCDFReader -->

   <FileSeriesReaderProxy name="CSVReader"
                          class="vtkFileSeriesReader"
                          label="CSV Reader"
                          file_name_method="SetFileName">
      <Documentation
        short_help="Read a comma-separated values file."
        long_help="Read a comma-separated values file into a 1D rectilinear grid.">
        The CSV reader reads a comma-separated values file into a 1D rectilinear
        grid. If the file was saved using the CSVWriter, then the rectilinear
        grid's points and point data can be restored as well as the cell data.
        Otherwise all the data in the CSV file is treated as cell data. The
        default file extension is .csv.
        This can read file series as well.
      </Documentation>

      <StringVectorProperty name="FileName"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            animateable="0"
                            number_of_elements="0" 
                            repeat_command="1"
                            information_property="FileNameInfo">
        <FileListDomain name="files"/>
        <Documentation>
          The list of files to be read by the reader. Each file is expected to be
          a csv file. If more than 1 file is specified, the reader will switch to
          file series mode in which it will pretend that it can support time and
          provide 1 file per time step.
        </Documentation>
      </StringVectorProperty>

     <StringVectorProperty name="FileNameInfo"
        command="GetCurrentFileName"
        information_only="1" >
        <SimpleStringInformationHelper />
     </StringVectorProperty>

 
      <DoubleVectorProperty name="TimestepValues"
                            repeatable="1"
                            information_only="1">
        <TimeStepsInformationHelper/>
        <Documentation>
          Available timestep values.
        </Documentation>
      </DoubleVectorProperty>

      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="CSVReaderCore">
        </Proxy>
        <ExposedProperties>
          <Property name="DetectNumericColumns" />
          <Property name="UseStringDelimiter" />
          <Property name="HaveHeaders" />
          <Property name="FieldDelimiterCharacters" />
        </ExposedProperties>
      </SubProxy>

     <Hints>
        <!-- View can be used to specify the preferred view for the proxy -->
        <View type="SpreadSheetView" />
     </Hints>
      <!-- End of CSVReader -->
   </FileSeriesReaderProxy>

  </ProxyGroup>
</ServerManagerConfiguration>
