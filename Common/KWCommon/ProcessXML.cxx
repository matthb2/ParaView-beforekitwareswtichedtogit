#include "vtkObject.h"

#include <vtkstd/string>
#include <vtkstd/vector>

class Output
{
public:
  Output()
    {
    this->MaxLen = 10000;
    this->CurrentPosition = 0;
    }
  ~Output()
    {
    this->Stream.rdbuf()->freeze(0);
    this->InitStream.rdbuf()->freeze(0);
    }

  ostrstream Stream;
  ostrstream InitStream;

  int MaxLen;
  long CurrentPosition;
  int Count;

  void PrintHeader(const char* title, const char* file)
    {
    this->Stream << endl
      << "// From file " << file << endl
      << "static const char* vtkPVInitializeStandard" << title << "Interfaces" << this->Count 
      << " =" << endl;
    this->CurrentPosition = this->Stream.tellp();
    this->InitStream << "  ostr << vtkPVInitializeStandard" << title << "Interfaces" 
      << this->Count << ";" << endl;
    }

  void CheckSplit(const char* title, const char* file)
    {
    if ( (this->Stream.tellp() - this->CurrentPosition) > this->MaxLen )
      {
      this->Count ++;
      this->Stream << ";" << endl;
      this->PrintHeader(title, file);
      }
    }

  int ProcessFile(const char* file, const char* title)
    {
    FILE* fp = fopen(file, "r");
    if ( !fp )
      {
      cout << "Canot open file: " << file << endl;
      return VTK_ERROR;
      }
    int ch;
    int start = 1;
    int preproc = 0;
    int in_ifdef = 0;
    int in_endif = 0;
    int preproc_cnt = 0;

    this->InitStream
      << "// Define the " << title << " interfaces." << endl
      << "//" << endl 
      << "// Generated from file: " << file << endl
      << "//" << endl
      << "char* vtkPVInitialize::GetStandard" << title << "Interfaces()" << endl
      << "{" << endl
      << "  ostrstream ostr;" << endl;

    this->Count = 0;
    this->PrintHeader(title, file);
    this->Stream << "\"";
    while ( ( ch = fgetc(fp) ) != EOF )
      {
      if ( preproc )
        {
        preproc_cnt ++;
        if ( ch == '\n' )
          {
          preproc = 0;
          if ( in_endif )
            {
            in_ifdef = 0;
            in_endif = 0;
            this->Stream << " // End of ifdef";
            this->CheckSplit(title, file);
            }
          this->Stream << endl << "\"";
          }
        else
          {
          if ( preproc_cnt == 1 )
            {
            if ( ch == 'i' )
              {
              in_ifdef = 1;
              }
            else if ( ch == 'e' )
              {
              in_ifdef = 2;
              }
            }
          else if ( preproc_cnt == 2 && in_ifdef == 2 && ch == 'n' )
            {
            in_endif = 1;
            }
          this->Stream << (unsigned char)ch;
          }
        }
      else
        {
        if ( ch == '\n' )
          {
          this->Stream << "\\n\"" << endl;
          this->CheckSplit(title, file);
          this->Stream << "\"";
          start = 1;
          }
        else if ( start && ch == '#' )
          {
          preproc = 1;
          this->Stream << "\\n\"" << endl;
          this->CheckSplit(title, file);
          this->Stream << "#";
          preproc_cnt = 0;
          }
        else if ( ch == '\\' )
          {
          this->Stream << "\\\\";
          start = 0;
          }
        else if ( ch == '\"' )
          {
          this->Stream << "\\\"";
          start = 0;
          }
        else
          {
          this->Stream << (unsigned char)ch;
          start = 0;
          }
        }
      }
    this->Stream << "\\n\";" << endl;
    this->InitStream 
      << "  ostr << ends;" << endl
      << "  this->SetStandard" << title << "String(ostr.str());" << endl
      << "  ostr.rdbuf()->freeze(0);" << endl
      << "  return this->Standard" << title << "String;" << endl
      << "}" << endl << endl;
    
    fclose(fp);
    return VTK_OK;
    }
};

int main(int argc, char* argv[])
{
  if ( argc < 4 )
    {
    cout << "Usage: " << argv[0] << " <output-file> <input-path> <modules>..." << endl;
    return 1;
    }
  Output ot;
  ot.Stream << "// Loadable modules" << endl
    << "//" << endl
    << "// Generated by " << argv[0] << endl
    << "//" << endl
    << "#ifndef __vtkPVDefaultModules_h" << endl
    << "#define __vtkPVDefaultModules_h" << endl
    << "" << endl
    << "#include \"vtkToolkits.h\"" << endl
    << "#include \"vtkPVConfig.h\"" << endl
    << "" << endl;

  vtkstd::string output = argv[1];
  vtkstd::string input = argv[2];

  int cc;
  for ( cc = 3; cc < argc; cc ++ )
    {
    vtkstd::string fname = input + "/" + argv[cc] + ".xml";

    if ( ot.ProcessFile(fname.c_str(), argv[cc]) != VTK_OK )
      {
      cout << "Problem generating header file from XML file: " << fname.c_str() << endl;
      return 1;
      }
    }
  ot.InitStream << ends;
  ot.Stream << endl << endl << ot.InitStream.str() << endl;
  ot.InitStream.rdbuf()->freeze(0);
  
  ot.Stream << "" << endl
    << "#endif" << endl;
  ot.Stream << ends;
  FILE* fp = fopen(output.c_str(), "w");
  if ( !fp )
    {
    cout << "Cannot open output file: " << output.c_str() << endl;
    return 1;
    }
  fprintf(fp, "%s", ot.Stream.str());
  fclose(fp);
  return 0;
}
